
RHF76-052.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08000e94  08000e94  00010e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fb0  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  08000fb0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000fb0  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034b7  00000000  00000000  00010fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a2a  00000000  00000000  0001448f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00014ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000128  00000000  00000000  00015050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ae5e  00000000  00000000  00015178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000274e  00000000  00000000  0001ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00038349  00000000  00000000  00022724  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0005aa6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003dc  00000000  00000000  0005aae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000e7c 	.word	0x08000e7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000e7c 	.word	0x08000e7c

08000108 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	001a      	movs	r2, r3
 800011a:	231f      	movs	r3, #31
 800011c:	401a      	ands	r2, r3
 800011e:	4b04      	ldr	r3, [pc, #16]	; (8000130 <NVIC_EnableIRQ+0x28>)
 8000120:	2101      	movs	r1, #1
 8000122:	4091      	lsls	r1, r2
 8000124:	000a      	movs	r2, r1
 8000126:	601a      	str	r2, [r3, #0]
}
 8000128:	46c0      	nop			; (mov r8, r8)
 800012a:	46bd      	mov	sp, r7
 800012c:	b002      	add	sp, #8
 800012e:	bd80      	pop	{r7, pc}
 8000130:	e000e100 	.word	0xe000e100

08000134 <Delay>:
	REG_LR_HOPPERIOD,			0x00,					//Standart
		 */
};

/**********************************************Use functions***********************************/
void Delay(uint32_t delay){
 8000134:	b580      	push	{r7, lr}
 8000136:	b082      	sub	sp, #8
 8000138:	af00      	add	r7, sp, #0
 800013a:	6078      	str	r0, [r7, #4]
	for(; delay > 0; delay--);
 800013c:	e002      	b.n	8000144 <Delay+0x10>
 800013e:	687b      	ldr	r3, [r7, #4]
 8000140:	3b01      	subs	r3, #1
 8000142:	607b      	str	r3, [r7, #4]
 8000144:	687b      	ldr	r3, [r7, #4]
 8000146:	2b00      	cmp	r3, #0
 8000148:	d1f9      	bne.n	800013e <Delay+0xa>
}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	46bd      	mov	sp, r7
 800014e:	b002      	add	sp, #8
 8000150:	bd80      	pop	{r7, pc}
	...

08000154 <SX1276Init>:

void SX1276Init()
{
 8000154:	b580      	push	{r7, lr}
 8000156:	af00      	add	r7, sp, #0

	//Setup RESET Pin SX1276
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8000158:	4b4e      	ldr	r3, [pc, #312]	; (8000294 <SX1276Init+0x140>)
 800015a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800015c:	4b4d      	ldr	r3, [pc, #308]	; (8000294 <SX1276Init+0x140>)
 800015e:	2102      	movs	r1, #2
 8000160:	430a      	orrs	r2, r1
 8000162:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER |= GPIO_MODER_MODE11_0; //General purpose output mode
 8000164:	4b4c      	ldr	r3, [pc, #304]	; (8000298 <SX1276Init+0x144>)
 8000166:	681a      	ldr	r2, [r3, #0]
 8000168:	4b4b      	ldr	r3, [pc, #300]	; (8000298 <SX1276Init+0x144>)
 800016a:	2180      	movs	r1, #128	; 0x80
 800016c:	03c9      	lsls	r1, r1, #15
 800016e:	430a      	orrs	r2, r1
 8000170:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_11; //Output push-pull
 8000172:	4b49      	ldr	r3, [pc, #292]	; (8000298 <SX1276Init+0x144>)
 8000174:	685a      	ldr	r2, [r3, #4]
 8000176:	4b48      	ldr	r3, [pc, #288]	; (8000298 <SX1276Init+0x144>)
 8000178:	4948      	ldr	r1, [pc, #288]	; (800029c <SX1276Init+0x148>)
 800017a:	400a      	ands	r2, r1
 800017c:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEED11; //Very high speed
 800017e:	4b46      	ldr	r3, [pc, #280]	; (8000298 <SX1276Init+0x144>)
 8000180:	689a      	ldr	r2, [r3, #8]
 8000182:	4b45      	ldr	r3, [pc, #276]	; (8000298 <SX1276Init+0x144>)
 8000184:	21c0      	movs	r1, #192	; 0xc0
 8000186:	0409      	lsls	r1, r1, #16
 8000188:	430a      	orrs	r2, r1
 800018a:	609a      	str	r2, [r3, #8]
	GPIOB->ODR |= GPIO_ODR_OD11;
 800018c:	4b42      	ldr	r3, [pc, #264]	; (8000298 <SX1276Init+0x144>)
 800018e:	695a      	ldr	r2, [r3, #20]
 8000190:	4b41      	ldr	r3, [pc, #260]	; (8000298 <SX1276Init+0x144>)
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	0109      	lsls	r1, r1, #4
 8000196:	430a      	orrs	r2, r1
 8000198:	615a      	str	r2, [r3, #20]

	//-------------Setup RF Switch---------------//
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800019a:	4b3e      	ldr	r3, [pc, #248]	; (8000294 <SX1276Init+0x140>)
 800019c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800019e:	4b3d      	ldr	r3, [pc, #244]	; (8000294 <SX1276Init+0x140>)
 80001a0:	2101      	movs	r1, #1
 80001a2:	430a      	orrs	r2, r1
 80001a4:	62da      	str	r2, [r3, #44]	; 0x2c
	//
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1; //General purpose output mode
 80001a6:	23a0      	movs	r3, #160	; 0xa0
 80001a8:	05db      	lsls	r3, r3, #23
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	23a0      	movs	r3, #160	; 0xa0
 80001ae:	05db      	lsls	r3, r3, #23
 80001b0:	2108      	movs	r1, #8
 80001b2:	438a      	bics	r2, r1
 80001b4:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_1; //Output push-pull
 80001b6:	23a0      	movs	r3, #160	; 0xa0
 80001b8:	05db      	lsls	r3, r3, #23
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	23a0      	movs	r3, #160	; 0xa0
 80001be:	05db      	lsls	r3, r3, #23
 80001c0:	2102      	movs	r1, #2
 80001c2:	438a      	bics	r2, r1
 80001c4:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED1; //Very high speed
 80001c6:	23a0      	movs	r3, #160	; 0xa0
 80001c8:	05db      	lsls	r3, r3, #23
 80001ca:	689a      	ldr	r2, [r3, #8]
 80001cc:	23a0      	movs	r3, #160	; 0xa0
 80001ce:	05db      	lsls	r3, r3, #23
 80001d0:	210c      	movs	r1, #12
 80001d2:	430a      	orrs	r2, r1
 80001d4:	609a      	str	r2, [r3, #8]
	GPIOA->ODR &= ~GPIO_ODR_OD1;
 80001d6:	23a0      	movs	r3, #160	; 0xa0
 80001d8:	05db      	lsls	r3, r3, #23
 80001da:	695a      	ldr	r2, [r3, #20]
 80001dc:	23a0      	movs	r3, #160	; 0xa0
 80001de:	05db      	lsls	r3, r3, #23
 80001e0:	2102      	movs	r1, #2
 80001e2:	438a      	bics	r2, r1
 80001e4:	615a      	str	r2, [r3, #20]
	//
	GPIOA->MODER &= ~GPIO_MODER_MODE2_1; //General purpose output mode
 80001e6:	23a0      	movs	r3, #160	; 0xa0
 80001e8:	05db      	lsls	r3, r3, #23
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	23a0      	movs	r3, #160	; 0xa0
 80001ee:	05db      	lsls	r3, r3, #23
 80001f0:	2120      	movs	r1, #32
 80001f2:	438a      	bics	r2, r1
 80001f4:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_2; //Output push-pull
 80001f6:	23a0      	movs	r3, #160	; 0xa0
 80001f8:	05db      	lsls	r3, r3, #23
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	23a0      	movs	r3, #160	; 0xa0
 80001fe:	05db      	lsls	r3, r3, #23
 8000200:	2104      	movs	r1, #4
 8000202:	438a      	bics	r2, r1
 8000204:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED2; //Very high speed
 8000206:	23a0      	movs	r3, #160	; 0xa0
 8000208:	05db      	lsls	r3, r3, #23
 800020a:	689a      	ldr	r2, [r3, #8]
 800020c:	23a0      	movs	r3, #160	; 0xa0
 800020e:	05db      	lsls	r3, r3, #23
 8000210:	2130      	movs	r1, #48	; 0x30
 8000212:	430a      	orrs	r2, r1
 8000214:	609a      	str	r2, [r3, #8]
	GPIOA->ODR &= ~GPIO_ODR_OD2;
 8000216:	23a0      	movs	r3, #160	; 0xa0
 8000218:	05db      	lsls	r3, r3, #23
 800021a:	695a      	ldr	r2, [r3, #20]
 800021c:	23a0      	movs	r3, #160	; 0xa0
 800021e:	05db      	lsls	r3, r3, #23
 8000220:	2104      	movs	r1, #4
 8000222:	438a      	bics	r2, r1
 8000224:	615a      	str	r2, [r3, #20]
	//-------------------------------------------//

	//Setup interrupt from PB10 - DIO0 from SX1276
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <SX1276Init+0x140>)
 8000228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <SX1276Init+0x140>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000232:	4b19      	ldr	r3, [pc, #100]	; (8000298 <SX1276Init+0x144>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b18      	ldr	r3, [pc, #96]	; (8000298 <SX1276Init+0x144>)
 8000238:	4919      	ldr	r1, [pc, #100]	; (80002a0 <SX1276Init+0x14c>)
 800023a:	400a      	ands	r2, r1
 800023c:	601a      	str	r2, [r3, #0]
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI10_PB;
 800023e:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <SX1276Init+0x150>)
 8000240:	691a      	ldr	r2, [r3, #16]
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <SX1276Init+0x150>)
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	0049      	lsls	r1, r1, #1
 8000248:	430a      	orrs	r2, r1
 800024a:	611a      	str	r2, [r3, #16]
	EXTI->IMR |= EXTI_IMR_IM10;
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <SX1276Init+0x154>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <SX1276Init+0x154>)
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	00c9      	lsls	r1, r1, #3
 8000256:	430a      	orrs	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= EXTI_RTSR_RT10;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <SX1276Init+0x154>)
 800025c:	689a      	ldr	r2, [r3, #8]
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <SX1276Init+0x154>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	00c9      	lsls	r1, r1, #3
 8000264:	430a      	orrs	r2, r1
 8000266:	609a      	str	r2, [r3, #8]
	EXTI->PR |= EXTI_PR_PIF10;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <SX1276Init+0x154>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <SX1276Init+0x154>)
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	00c9      	lsls	r1, r1, #3
 8000272:	430a      	orrs	r2, r1
 8000274:	615a      	str	r2, [r3, #20]
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000276:	2007      	movs	r0, #7
 8000278:	f7ff ff46 	bl	8000108 <NVIC_EnableIRQ>

	CS_HI();
 800027c:	23a0      	movs	r3, #160	; 0xa0
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	23a0      	movs	r3, #160	; 0xa0
 8000284:	05db      	lsls	r3, r3, #23
 8000286:	2110      	movs	r1, #16
 8000288:	430a      	orrs	r2, r1
 800028a:	619a      	str	r2, [r3, #24]

}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	40021000 	.word	0x40021000
 8000298:	50000400 	.word	0x50000400
 800029c:	fffff7ff 	.word	0xfffff7ff
 80002a0:	ffcfffff 	.word	0xffcfffff
 80002a4:	40010000 	.word	0x40010000
 80002a8:	40010400 	.word	0x40010400

080002ac <SX1276_WriteSingle>:

uint8_t SX1276_WriteSingle(uint8_t command,uint8_t value)
{//WriteSingle
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	1c0a      	adds	r2, r1, #0
 80002bc:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	CS_LO();
 80002be:	23a0      	movs	r3, #160	; 0xa0
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2110      	movs	r1, #16
 80002ca:	430a      	orrs	r2, r1
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOA->IDR & MISO){};							//waiting until CC1101 ready

	while (!(SPI1->SR & SPI_SR_TXE)){};
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <SX1276_WriteSingle+0xb4>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	2202      	movs	r2, #2
 80002d6:	4013      	ands	r3, r2
 80002d8:	d0fa      	beq.n	80002d0 <SX1276_WriteSingle+0x24>
	SPI1_DR_8bit = (WRITE_SINGLE | command);
 80002da:	4922      	ldr	r1, [pc, #136]	; (8000364 <SX1276_WriteSingle+0xb8>)
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	4252      	negs	r2, r2
 80002e4:	4313      	orrs	r3, r2
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	700b      	strb	r3, [r1, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <SX1276_WriteSingle+0xb4>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	4013      	ands	r3, r2
 80002f4:	d1fa      	bne.n	80002ec <SX1276_WriteSingle+0x40>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <SX1276_WriteSingle+0xb4>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	2201      	movs	r2, #1
 80002fe:	4013      	ands	r3, r2
 8000300:	d0fa      	beq.n	80002f8 <SX1276_WriteSingle+0x4c>
	temp=SPI1_DR_8bit;
 8000302:	4a18      	ldr	r2, [pc, #96]	; (8000364 <SX1276_WriteSingle+0xb8>)
 8000304:	230f      	movs	r3, #15
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	701a      	strb	r2, [r3, #0]

	while (!(SPI1->SR & SPI_SR_TXE)){};
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <SX1276_WriteSingle+0xb4>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	2202      	movs	r2, #2
 8000314:	4013      	ands	r3, r2
 8000316:	d0fa      	beq.n	800030e <SX1276_WriteSingle+0x62>
	SPI1_DR_8bit = value;
 8000318:	4a12      	ldr	r2, [pc, #72]	; (8000364 <SX1276_WriteSingle+0xb8>)
 800031a:	1dbb      	adds	r3, r7, #6
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <SX1276_WriteSingle+0xb4>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	4013      	ands	r3, r2
 800032a:	d1fa      	bne.n	8000322 <SX1276_WriteSingle+0x76>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <SX1276_WriteSingle+0xb4>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2201      	movs	r2, #1
 8000334:	4013      	ands	r3, r2
 8000336:	d0fa      	beq.n	800032e <SX1276_WriteSingle+0x82>
	temp=SPI1_DR_8bit;
 8000338:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <SX1276_WriteSingle+0xb8>)
 800033a:	200f      	movs	r0, #15
 800033c:	183b      	adds	r3, r7, r0
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	701a      	strb	r2, [r3, #0]

	CS_HI();
 8000342:	23a0      	movs	r3, #160	; 0xa0
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	699a      	ldr	r2, [r3, #24]
 8000348:	23a0      	movs	r3, #160	; 0xa0
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	2110      	movs	r1, #16
 800034e:	430a      	orrs	r2, r1
 8000350:	619a      	str	r2, [r3, #24]
	return temp;
 8000352:	183b      	adds	r3, r7, r0
 8000354:	781b      	ldrb	r3, [r3, #0]
}
 8000356:	0018      	movs	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	b004      	add	sp, #16
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	40013000 	.word	0x40013000
 8000364:	4001300c 	.word	0x4001300c

08000368 <SX1276_ReadSingle>:

uint8_t SX1276_ReadSingle(uint8_t command)
{//ReadSingle
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	0002      	movs	r2, r0
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	CS_LO();
 8000374:	23a0      	movs	r3, #160	; 0xa0
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800037a:	23a0      	movs	r3, #160	; 0xa0
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2110      	movs	r1, #16
 8000380:	430a      	orrs	r2, r1
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOB->IDR & MISO){};							//waiting until CC1101 ready

	while (!(SPI1->SR & SPI_SR_TXE)){};
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	4b20      	ldr	r3, [pc, #128]	; (8000408 <SX1276_ReadSingle+0xa0>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	2202      	movs	r2, #2
 800038c:	4013      	ands	r3, r2
 800038e:	d0fa      	beq.n	8000386 <SX1276_ReadSingle+0x1e>
	SPI1_DR_8bit = (command | READ_SINGLE);
 8000390:	4a1e      	ldr	r2, [pc, #120]	; (800040c <SX1276_ReadSingle+0xa4>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <SX1276_ReadSingle+0xa0>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	4013      	ands	r3, r2
 80003a2:	d1fa      	bne.n	800039a <SX1276_ReadSingle+0x32>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <SX1276_ReadSingle+0xa0>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	2201      	movs	r2, #1
 80003ac:	4013      	ands	r3, r2
 80003ae:	d0fa      	beq.n	80003a6 <SX1276_ReadSingle+0x3e>
	command = SPI1_DR_8bit;
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <SX1276_ReadSingle+0xa4>)
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	7812      	ldrb	r2, [r2, #0]
 80003b6:	701a      	strb	r2, [r3, #0]
	while (!(SPI1->SR & SPI_SR_TXE)){};
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SX1276_ReadSingle+0xa0>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	2202      	movs	r2, #2
 80003c0:	4013      	ands	r3, r2
 80003c2:	d0fa      	beq.n	80003ba <SX1276_ReadSingle+0x52>
	SPI1_DR_8bit = 0x00;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SX1276_ReadSingle+0xa4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <SX1276_ReadSingle+0xa0>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	4013      	ands	r3, r2
 80003d4:	d1fa      	bne.n	80003cc <SX1276_ReadSingle+0x64>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SX1276_ReadSingle+0xa0>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	2201      	movs	r2, #1
 80003de:	4013      	ands	r3, r2
 80003e0:	d0fa      	beq.n	80003d8 <SX1276_ReadSingle+0x70>
	temp = SPI1_DR_8bit;
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <SX1276_ReadSingle+0xa4>)
 80003e4:	200f      	movs	r0, #15
 80003e6:	183b      	adds	r3, r7, r0
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	701a      	strb	r2, [r3, #0]

	CS_HI();
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	699a      	ldr	r2, [r3, #24]
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	2110      	movs	r1, #16
 80003f8:	430a      	orrs	r2, r1
 80003fa:	619a      	str	r2, [r3, #24]
	return temp;
 80003fc:	183b      	adds	r3, r7, r0
 80003fe:	781b      	ldrb	r3, [r3, #0]
}
 8000400:	0018      	movs	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	b004      	add	sp, #16
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40013000 	.word	0x40013000
 800040c:	4001300c 	.word	0x4001300c

08000410 <SX1276_WriteBurst>:
void SX1276_WriteBurst( uint8_t addr, char *buff, uint8_t size )
{//WriteBurst
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6039      	str	r1, [r7, #0]
 8000418:	0011      	movs	r1, r2
 800041a:	1dfb      	adds	r3, r7, #7
 800041c:	1c02      	adds	r2, r0, #0
 800041e:	701a      	strb	r2, [r3, #0]
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	1c0a      	adds	r2, r1, #0
 8000424:	701a      	strb	r2, [r3, #0]

	uint8_t j_;
	CS_LO();
 8000426:	23a0      	movs	r3, #160	; 0xa0
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2110      	movs	r1, #16
 8000432:	430a      	orrs	r2, r1
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOA->IDR & MISO){};							//waiting until CC1101 ready
	while (!(SPI1->SR & SPI_SR_TXE)){};
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <SX1276_WriteBurst+0xd4>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	2202      	movs	r2, #2
 800043e:	4013      	ands	r3, r2
 8000440:	d0fa      	beq.n	8000438 <SX1276_WriteBurst+0x28>
	SPI1_DR_8bit = (addr | WRITE_SINGLE);
 8000442:	4929      	ldr	r1, [pc, #164]	; (80004e8 <SX1276_WriteBurst+0xd8>)
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	4252      	negs	r2, r2
 800044c:	4313      	orrs	r3, r2
 800044e:	b2db      	uxtb	r3, r3
 8000450:	700b      	strb	r3, [r1, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <SX1276_WriteBurst+0xd4>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	4013      	ands	r3, r2
 800045c:	d1fa      	bne.n	8000454 <SX1276_WriteBurst+0x44>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <SX1276_WriteBurst+0xd4>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	2201      	movs	r2, #1
 8000466:	4013      	ands	r3, r2
 8000468:	d0fa      	beq.n	8000460 <SX1276_WriteBurst+0x50>
	SPI1_DR_8bit;
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <SX1276_WriteBurst+0xd8>)
 800046c:	781b      	ldrb	r3, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 800046e:	230f      	movs	r3, #15
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e021      	b.n	80004bc <SX1276_WriteBurst+0xac>
	{
		while (!(SPI1->SR & SPI_SR_TXE)){};
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <SX1276_WriteBurst+0xd4>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	2202      	movs	r2, #2
 8000480:	4013      	ands	r3, r2
 8000482:	d0fa      	beq.n	800047a <SX1276_WriteBurst+0x6a>
		SPI1_DR_8bit = buff[j_];
 8000484:	230f      	movs	r3, #15
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	18d3      	adds	r3, r2, r3
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <SX1276_WriteBurst+0xd8>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	7013      	strb	r3, [r2, #0]
		while (SPI1->SR & SPI_SR_BSY){};
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <SX1276_WriteBurst+0xd4>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	4013      	ands	r3, r2
 800049e:	d1fa      	bne.n	8000496 <SX1276_WriteBurst+0x86>
		while (!(SPI1->SR & SPI_SR_RXNE)){};
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <SX1276_WriteBurst+0xd4>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	2201      	movs	r2, #1
 80004a8:	4013      	ands	r3, r2
 80004aa:	d0fa      	beq.n	80004a2 <SX1276_WriteBurst+0x92>
		SPI1_DR_8bit;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <SX1276_WriteBurst+0xd8>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	3201      	adds	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	230f      	movs	r3, #15
 80004be:	18fa      	adds	r2, r7, r3
 80004c0:	1dbb      	adds	r3, r7, #6
 80004c2:	7812      	ldrb	r2, [r2, #0]
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d3d6      	bcc.n	8000478 <SX1276_WriteBurst+0x68>
	}
	CS_HI();
 80004ca:	23a0      	movs	r3, #160	; 0xa0
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2110      	movs	r1, #16
 80004d6:	430a      	orrs	r2, r1
 80004d8:	619a      	str	r2, [r3, #24]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40013000 	.word	0x40013000
 80004e8:	4001300c 	.word	0x4001300c

080004ec <SX1276_ReadBurst>:
void SX1276_ReadBurst( uint8_t cmd, char *buff, uint8_t size )
{//ReadBurst
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6039      	str	r1, [r7, #0]
 80004f4:	0011      	movs	r1, r2
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	1c02      	adds	r2, r0, #0
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	1c0a      	adds	r2, r1, #0
 8000500:	701a      	strb	r2, [r3, #0]

	uint8_t j_;
	CS_LO();
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2110      	movs	r1, #16
 800050e:	430a      	orrs	r2, r1
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOA->IDR & MISO){};							//waiting until CC1101 ready
	while (!(SPI1->SR & SPI_SR_TXE)){};
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SX1276_ReadBurst+0xcc>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	2202      	movs	r2, #2
 800051a:	4013      	ands	r3, r2
 800051c:	d0fa      	beq.n	8000514 <SX1276_ReadBurst+0x28>
	SPI1_DR_8bit = (cmd | READ_SINGLE);
 800051e:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SX1276_ReadBurst+0xd0>)
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <SX1276_ReadBurst+0xcc>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	4013      	ands	r3, r2
 8000530:	d1fa      	bne.n	8000528 <SX1276_ReadBurst+0x3c>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <SX1276_ReadBurst+0xcc>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2201      	movs	r2, #1
 800053a:	4013      	ands	r3, r2
 800053c:	d0fa      	beq.n	8000534 <SX1276_ReadBurst+0x48>
	SPI1_DR_8bit;
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SX1276_ReadBurst+0xd0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 8000542:	230f      	movs	r3, #15
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
 800054a:	e022      	b.n	8000592 <SX1276_ReadBurst+0xa6>
	{
		while (!(SPI1->SR & SPI_SR_TXE)){};
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <SX1276_ReadBurst+0xcc>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	2202      	movs	r2, #2
 8000554:	4013      	ands	r3, r2
 8000556:	d0fa      	beq.n	800054e <SX1276_ReadBurst+0x62>
		SPI1_DR_8bit = 0x00;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <SX1276_ReadBurst+0xd0>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
		while (SPI1->SR & SPI_SR_BSY){};
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <SX1276_ReadBurst+0xcc>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	4013      	ands	r3, r2
 8000568:	d1fa      	bne.n	8000560 <SX1276_ReadBurst+0x74>
		while (!(SPI1->SR & SPI_SR_RXNE)){};
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <SX1276_ReadBurst+0xcc>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	2201      	movs	r2, #1
 8000572:	4013      	ands	r3, r2
 8000574:	d0fa      	beq.n	800056c <SX1276_ReadBurst+0x80>
		buff[j_] = SPI1_DR_8bit;
 8000576:	4911      	ldr	r1, [pc, #68]	; (80005bc <SX1276_ReadBurst+0xd0>)
 8000578:	200f      	movs	r0, #15
 800057a:	183b      	adds	r3, r7, r0
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	18d3      	adds	r3, r2, r3
 8000582:	780a      	ldrb	r2, [r1, #0]
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	701a      	strb	r2, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	183b      	adds	r3, r7, r0
 800058e:	3201      	adds	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	230f      	movs	r3, #15
 8000594:	18fa      	adds	r2, r7, r3
 8000596:	1dbb      	adds	r3, r7, #6
 8000598:	7812      	ldrb	r2, [r2, #0]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3d5      	bcc.n	800054c <SX1276_ReadBurst+0x60>
	}
	CS_HI();
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	23a0      	movs	r3, #160	; 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	2110      	movs	r1, #16
 80005ac:	430a      	orrs	r2, r1
 80005ae:	619a      	str	r2, [r3, #24]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40013000 	.word	0x40013000
 80005bc:	4001300c 	.word	0x4001300c

080005c0 <SX1276_Init>:
void SX1276_Init(void)
{//CC1101_Init
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	uint8_t qnt,i_temp=0;
 80005c6:	1dfb      	adds	r3, r7, #7
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
	qnt=sizeof (LoRa_config);
 80005cc:	1dbb      	adds	r3, r7, #6
 80005ce:	2214      	movs	r2, #20
 80005d0:	701a      	strb	r2, [r3, #0]

	SX1276_RES();
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SX1276_Init+0x98>)
 80005d4:	699a      	ldr	r2, [r3, #24]
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <SX1276_Init+0x98>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0109      	lsls	r1, r1, #4
 80005dc:	430a      	orrs	r2, r1
 80005de:	619a      	str	r2, [r3, #24]
	Delay(0xFFF);
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SX1276_Init+0x9c>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff fda6 	bl	8000134 <Delay>
	SX1276_REL();
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <SX1276_Init+0x98>)
 80005ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <SX1276_Init+0x98>)
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0109      	lsls	r1, r1, #4
 80005f2:	430a      	orrs	r2, r1
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
	Delay(0xFFF);
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <SX1276_Init+0x9c>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff fd9b 	bl	8000134 <Delay>

//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
	while (i_temp < qnt)
 80005fe:	e010      	b.n	8000622 <SX1276_Init+0x62>
	{
		SX1276_WriteSingle(LoRa_config[i_temp],LoRa_config[i_temp+1]);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <SX1276_Init+0xa0>)
 8000606:	5cd0      	ldrb	r0, [r2, r3]
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <SX1276_Init+0xa0>)
 8000610:	5cd3      	ldrb	r3, [r2, r3]
 8000612:	0019      	movs	r1, r3
 8000614:	f7ff fe4a 	bl	80002ac <SX1276_WriteSingle>
		i_temp+=2;
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	1dfa      	adds	r2, r7, #7
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	3202      	adds	r2, #2
 8000620:	701a      	strb	r2, [r3, #0]
	while (i_temp < qnt)
 8000622:	1dfa      	adds	r2, r7, #7
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3e8      	bcc.n	8000600 <SX1276_Init+0x40>
	}
	SX1276_WriteSingle(REG_LR_DIOMAPPING1,	RFLR_DIOMAPPING1_DIO0_00);
 800062e:	2100      	movs	r1, #0
 8000630:	2040      	movs	r0, #64	; 0x40
 8000632:	f7ff fe3b 	bl	80002ac <SX1276_WriteSingle>

	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff fe37 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
 800063e:	21ff      	movs	r1, #255	; 0xff
 8000640:	2012      	movs	r0, #18
 8000642:	f7ff fe33 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER|0x80); // set scan receiver mod
 8000646:	2185      	movs	r1, #133	; 0x85
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff fe2f 	bl	80002ac <SX1276_WriteSingle>
//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER_SINGLE|0x80);
//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER);
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	50000400 	.word	0x50000400
 800065c:	00000fff 	.word	0x00000fff
 8000660:	08000f94 	.word	0x08000f94

08000664 <SX1276_ReadRXBUF>:

uint8_t SX1276_ReadRXBUF (char RX_BUF[], uint8_t* RX_BUF_SIZE)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]

	uint8_t isReceived = 0;
 800066e:	230f      	movs	r3, #15
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	int flags = SX1276_ReadSingle(REG_LR_IRQFLAGS);
 8000676:	2012      	movs	r0, #18
 8000678:	f7ff fe76 	bl	8000368 <SX1276_ReadSingle>
 800067c:	0003      	movs	r3, r0
 800067e:	60bb      	str	r3, [r7, #8]
	if((flags & RFLR_IRQFLAGS_RXDONE) || (flags & RFLR_IRQFLAGS_VALIDHEADER))
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	2240      	movs	r2, #64	; 0x40
 8000684:	4013      	ands	r3, r2
 8000686:	d103      	bne.n	8000690 <SX1276_ReadRXBUF+0x2c>
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2210      	movs	r2, #16
 800068c:	4013      	ands	r3, r2
 800068e:	d027      	beq.n	80006e0 <SX1276_ReadRXBUF+0x7c>
	{
		rx_bytes= SX1276_ReadSingle(REG_LR_RXNBBYTES);
 8000690:	2013      	movs	r0, #19
 8000692:	f7ff fe69 	bl	8000368 <SX1276_ReadSingle>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <SX1276_ReadRXBUF+0x94>)
 800069c:	701a      	strb	r2, [r3, #0]
		if(rx_bytes > 0){
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <SX1276_ReadRXBUF+0x94>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d01c      	beq.n	80006e0 <SX1276_ReadRXBUF+0x7c>
			rssi=SX1276_ReadSingle(REG_LR_PKTRSSIVALUE);
 80006a6:	201a      	movs	r0, #26
 80006a8:	f7ff fe5e 	bl	8000368 <SX1276_ReadSingle>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <SX1276_ReadRXBUF+0x98>)
 80006b2:	701a      	strb	r2, [r3, #0]
			snr= SX1276_ReadSingle(REG_LR_PKTSNRVALUE);
 80006b4:	2019      	movs	r0, #25
 80006b6:	f7ff fe57 	bl	8000368 <SX1276_ReadSingle>
 80006ba:	0003      	movs	r3, r0
 80006bc:	001a      	movs	r2, r3
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <SX1276_ReadRXBUF+0x9c>)
 80006c0:	701a      	strb	r2, [r3, #0]
			SX1276_ReadBurst( REG_LR_FIFO, RX_BUF, rx_bytes);
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <SX1276_ReadRXBUF+0x94>)
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	0019      	movs	r1, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ff0e 	bl	80004ec <SX1276_ReadBurst>
			*RX_BUF_SIZE = rx_bytes;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <SX1276_ReadRXBUF+0x94>)
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	701a      	strb	r2, [r3, #0]
			isReceived = 1;
 80006d8:	230f      	movs	r3, #15
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
			//		flags = SX1276_ReadSingle(REG_LR_IRQFLAGS);
			//		SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
		}
	}
	SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
 80006e0:	21ff      	movs	r1, #255	; 0xff
 80006e2:	2012      	movs	r0, #18
 80006e4:	f7ff fde2 	bl	80002ac <SX1276_WriteSingle>

	return isReceived;
 80006e8:	230f      	movs	r3, #15
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	781b      	ldrb	r3, [r3, #0]
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000036 	.word	0x20000036
 80006fc:	20000037 	.word	0x20000037
 8000700:	20000038 	.word	0x20000038

08000704 <SX1276_SendTXBUF>:

void SX1276_SendTXBUF (uint8_t TX_BUF [], uint8_t BUF_SIZE)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	000a      	movs	r2, r1
 800070e:	1cfb      	adds	r3, r7, #3
 8000710:	701a      	strb	r2, [r3, #0]
	int txflag=0;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
	//	txflag = SX1276_ReadSingle(REG_LR_IRQFLAGS);// & RFLR_IRQFLAGS_TXDONE_MASK;
	SX1276_WriteSingle(REG_LR_DIOMAPPING1,	RFLR_DIOMAPPING1_DIO0_01);
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	2040      	movs	r0, #64	; 0x40
 800071a:	f7ff fdc7 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGS, 0xFF);
 800071e:	21ff      	movs	r1, #255	; 0xff
 8000720:	2012      	movs	r0, #18
 8000722:	f7ff fdc3 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGSMASK, ~RFLR_IRQFLAGS_TXDONE_MASK);
 8000726:	21f7      	movs	r1, #247	; 0xf7
 8000728:	2011      	movs	r0, #17
 800072a:	f7ff fdbf 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOTXBASEADDR, 0);
 800072e:	2100      	movs	r1, #0
 8000730:	200e      	movs	r0, #14
 8000732:	f7ff fdbb 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOADDRPTR, 0);
 8000736:	2100      	movs	r1, #0
 8000738:	200d      	movs	r0, #13
 800073a:	f7ff fdb7 	bl	80002ac <SX1276_WriteSingle>

	SX1276_WriteBurst( REG_LR_FIFO, TX_BUF, BUF_SIZE);
 800073e:	1cfb      	adds	r3, r7, #3
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0019      	movs	r1, r3
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fe62 	bl	8000410 <SX1276_WriteBurst>
	SX1276_WriteSingle(REG_LR_PAYLOADLENGTH,BUF_SIZE);
 800074c:	1cfb      	adds	r3, r7, #3
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	0019      	movs	r1, r3
 8000752:	2022      	movs	r0, #34	; 0x22
 8000754:	f7ff fdaa 	bl	80002ac <SX1276_WriteSingle>

	SX1276_WriteSingle(REG_LR_SYNCWORD,0x12);
 8000758:	2112      	movs	r1, #18
 800075a:	2039      	movs	r0, #57	; 0x39
 800075c:	f7ff fda6 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_STANDBY|0x80);
 8000760:	2181      	movs	r1, #129	; 0x81
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fda2 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOADDRPTR,0x80);
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	200d      	movs	r0, #13
 800076c:	f7ff fd9e 	bl	80002ac <SX1276_WriteSingle>
//		Delay(72000);

	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_TRANSMITTER|0x80);
 8000770:	2183      	movs	r1, #131	; 0x83
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fd9a 	bl	80002ac <SX1276_WriteSingle>

	while(!txflag)
 8000778:	e007      	b.n	800078a <SX1276_SendTXBUF+0x86>
	{
		txflag = SX1276_ReadSingle(REG_LR_IRQFLAGS) & RFLR_IRQFLAGS_TXDONE_MASK;
 800077a:	2012      	movs	r0, #18
 800077c:	f7ff fdf4 	bl	8000368 <SX1276_ReadSingle>
 8000780:	0003      	movs	r3, r0
 8000782:	001a      	movs	r2, r3
 8000784:	2308      	movs	r3, #8
 8000786:	4013      	ands	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
	while(!txflag)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f4      	beq.n	800077a <SX1276_SendTXBUF+0x76>
	}
	SX1276_WriteSingle(REG_LR_IRQFLAGSMASK, 0xFF);
 8000790:	21ff      	movs	r1, #255	; 0xff
 8000792:	2011      	movs	r0, #17
 8000794:	f7ff fd8a 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
 8000798:	21ff      	movs	r1, #255	; 0xff
 800079a:	2012      	movs	r0, #18
 800079c:	f7ff fd86 	bl	80002ac <SX1276_WriteSingle>

	SX1276_WriteSingle(REG_LR_DIOMAPPING1,	RFLR_DIOMAPPING1_DIO0_00); //set IRQ for RX_Done
 80007a0:	2100      	movs	r1, #0
 80007a2:	2040      	movs	r0, #64	; 0x40
 80007a4:	f7ff fd82 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGSMASK, ~RFLR_IRQFLAGS_RXDONE);
 80007a8:	21bf      	movs	r1, #191	; 0xbf
 80007aa:	2011      	movs	r0, #17
 80007ac:	f7ff fd7e 	bl	80002ac <SX1276_WriteSingle>
	//		while (!LFlag) {};
	//		SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
	//		LFlag=0;


}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <SX1276_CleanBuffer>:

void SX1276_CleanBuffer(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fd74 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOADDRPTR,0x00);
 80007c4:	2100      	movs	r1, #0
 80007c6:	200d      	movs	r0, #13
 80007c8:	f7ff fd70 	bl	80002ac <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER|0x80);
 80007cc:	2185      	movs	r1, #133	; 0x85
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fd6c 	bl	80002ac <SX1276_WriteSingle>
//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER_SINGLE|0x80);
//	Delay(0xFFFFFF);
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <NVIC_EnableIRQ>:
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	0002      	movs	r2, r0
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001a      	movs	r2, r3
 80007ee:	231f      	movs	r3, #31
 80007f0:	401a      	ands	r2, r3
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <NVIC_EnableIRQ+0x28>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	4091      	lsls	r1, r2
 80007f8:	000a      	movs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	e000e100 	.word	0xe000e100

08000808 <initSPI1>:
//int BufCounter;
//uint8_t RX_FINISHED=0;
/**********************************************Use functions***********************************/

void initSPI1(void)
{//page 769
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	//SPI1
	//PA4 - NSS,  	PA5 - SCK
	//PA6 - MISO, 	PA7 - MOSI

	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800080c:	4b86      	ldr	r3, [pc, #536]	; (8000a28 <initSPI1+0x220>)
 800080e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000810:	4b85      	ldr	r3, [pc, #532]	; (8000a28 <initSPI1+0x220>)
 8000812:	2101      	movs	r1, #1
 8000814:	430a      	orrs	r2, r1
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c

	//PA5(SCK)  PA7(MOSI) ����� - �������������� �������  push pull, PA6(MISO) ����� - Input floating, PA4(CS) ����� - �����, push-pull
	//clear registers
	GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	4982      	ldr	r1, [pc, #520]	; (8000a2c <initSPI1+0x224>)
 8000824:	400a      	ands	r2, r1
 8000826:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7);
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	21f0      	movs	r1, #240	; 0xf0
 8000834:	438a      	bics	r2, r1
 8000836:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED4 | GPIO_OSPEEDER_OSPEED5 | GPIO_OSPEEDER_OSPEED6 | GPIO_OSPEEDER_OSPEED7);
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	497a      	ldr	r1, [pc, #488]	; (8000a2c <initSPI1+0x224>)
 8000844:	400a      	ands	r2, r1
 8000846:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000848:	23a0      	movs	r3, #160	; 0xa0
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	23a0      	movs	r3, #160	; 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	4976      	ldr	r1, [pc, #472]	; (8000a2c <initSPI1+0x224>)
 8000854:	400a      	ands	r2, r1
 8000856:	60da      	str	r2, [r3, #12]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	6a1a      	ldr	r2, [r3, #32]
 800085e:	23a0      	movs	r3, #160	; 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	0412      	lsls	r2, r2, #16
 8000864:	0c12      	lsrs	r2, r2, #16
 8000866:	621a      	str	r2, [r3, #32]

	//NSS
	GPIOA->MODER |= GPIO_MODER_MODE4_0; //General purpose output mode
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	0049      	lsls	r1, r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_4; //Output push-pull
 800087a:	23a0      	movs	r3, #160	; 0xa0
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	23a0      	movs	r3, #160	; 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2110      	movs	r1, #16
 8000886:	438a      	bics	r2, r1
 8000888:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED4; //Very high speed
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	21c0      	movs	r1, #192	; 0xc0
 8000896:	0089      	lsls	r1, r1, #2
 8000898:	430a      	orrs	r2, r1
 800089a:	609a      	str	r2, [r3, #8]
//	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL4; //set AF0 for alternate like SPI1

	//SCK
	GPIOA->MODER |= GPIO_MODER_MODE5_1; //Alternative function
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	0109      	lsls	r1, r1, #4
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5; //Output push-pull
 80008ae:	23a0      	movs	r3, #160	; 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2120      	movs	r1, #32
 80008ba:	438a      	bics	r2, r1
 80008bc:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED5; //Very high speed
 80008be:	23a0      	movs	r3, #160	; 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	21c0      	movs	r1, #192	; 0xc0
 80008ca:	0109      	lsls	r1, r1, #4
 80008cc:	430a      	orrs	r2, r1
 80008ce:	609a      	str	r2, [r3, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5; //set AF0 for alternate like SPI1
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	6a1a      	ldr	r2, [r3, #32]
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	4955      	ldr	r1, [pc, #340]	; (8000a30 <initSPI1+0x228>)
 80008dc:	400a      	ands	r2, r1
 80008de:	621a      	str	r2, [r3, #32]

	//MISO
	GPIOA->MODER |= GPIO_MODER_MODE6_1; //Alternative function
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	0189      	lsls	r1, r1, #6
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD6; //No pull-up, no pull down
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	494d      	ldr	r1, [pc, #308]	; (8000a34 <initSPI1+0x22c>)
 80008fe:	400a      	ands	r2, r1
 8000900:	60da      	str	r2, [r3, #12]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL6; //set AF0 for alternate like SPI1
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	494a      	ldr	r1, [pc, #296]	; (8000a38 <initSPI1+0x230>)
 800090e:	400a      	ands	r2, r1
 8000910:	621a      	str	r2, [r3, #32]

	//MOSI
	GPIOA->MODER |= GPIO_MODER_MODE7_1; //Alternative function
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0209      	lsls	r1, r1, #8
 8000920:	430a      	orrs	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_7; //Output push-pull
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	438a      	bics	r2, r1
 8000932:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED7; //Very high speed
 8000934:	23a0      	movs	r3, #160	; 0xa0
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	21c0      	movs	r1, #192	; 0xc0
 8000940:	0209      	lsls	r1, r1, #8
 8000942:	430a      	orrs	r2, r1
 8000944:	609a      	str	r2, [r3, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL7; //set AF0 for alternate like SPI1
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	6a1a      	ldr	r2, [r3, #32]
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	0912      	lsrs	r2, r2, #4
 8000954:	621a      	str	r2, [r3, #32]

	//Setup SPI1
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <initSPI1+0x220>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095a:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <initSPI1+0x220>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0149      	lsls	r1, r1, #5
 8000960:	430a      	orrs	r2, r1
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
	SPI1->CR1 &= ~SPI_CR1_SPE;			//Disable SPI1
 8000964:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <initSPI1+0x234>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <initSPI1+0x234>)
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	438a      	bics	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
	SPI1->CR1 = 0;						//Reset CR1 registers
 8000970:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <initSPI1+0x234>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]

	SPI1->CR1 &= ~SPI_CR1_BR;			//Baud rate = Fpclk/2
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <initSPI1+0x234>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <initSPI1+0x234>)
 800097c:	2138      	movs	r1, #56	; 0x38
 800097e:	438a      	bics	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_BIDIMODE;
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <initSPI1+0x234>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <initSPI1+0x234>)
 8000988:	492d      	ldr	r1, [pc, #180]	; (8000a40 <initSPI1+0x238>)
 800098a:	400a      	ands	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_DFF;          //8 bit data
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <initSPI1+0x234>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <initSPI1+0x234>)
 8000994:	492b      	ldr	r1, [pc, #172]	; (8000a44 <initSPI1+0x23c>)
 8000996:	400a      	ands	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_CPOL;         //Polarity cls signal CPOL = 0;
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <initSPI1+0x234>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <initSPI1+0x234>)
 80009a0:	2102      	movs	r1, #2
 80009a2:	438a      	bics	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_CPHA;         //Phase cls signal    CPHA = 0;
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <initSPI1+0x234>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <initSPI1+0x234>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	438a      	bics	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SSM;  			//Hardware slave management disabled
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <initSPI1+0x234>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <initSPI1+0x234>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0089      	lsls	r1, r1, #2
 80009bc:	430a      	orrs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SSI;			//Master NSS is high
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <initSPI1+0x234>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <initSPI1+0x234>)
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	0049      	lsls	r1, r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_LSBFIRST;     //MSB will be first
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <initSPI1+0x234>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <initSPI1+0x234>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	438a      	bics	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_CRCEN;		//CRC disabled
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <initSPI1+0x234>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <initSPI1+0x234>)
 80009e0:	4919      	ldr	r1, [pc, #100]	; (8000a48 <initSPI1+0x240>)
 80009e2:	400a      	ands	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;          //Mode Master
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <initSPI1+0x234>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <initSPI1+0x234>)
 80009ec:	2104      	movs	r1, #4
 80009ee:	430a      	orrs	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]

//	SPI1->CR2 |= SPI_CR2_SSOE;
	SPI1->CR2 &= ~SPI_CR2_FRF;			//SPI mode: 0 - Motorola, 1 - TI
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <initSPI1+0x234>)
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <initSPI1+0x234>)
 80009f8:	2110      	movs	r1, #16
 80009fa:	438a      	bics	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]

	SPI1->CR1 |= SPI_CR1_SPE;           //Enable SPI1
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <initSPI1+0x234>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <initSPI1+0x234>)
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SPI1_IRQn);			//Interrupt enable
 8000a0a:	2019      	movs	r0, #25
 8000a0c:	f7ff fee6 	bl	80007dc <NVIC_EnableIRQ>

	NSS_SET;
 8000a10:	23a0      	movs	r3, #160	; 0xa0
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	ffff00ff 	.word	0xffff00ff
 8000a30:	ff0fffff 	.word	0xff0fffff
 8000a34:	ffffcfff 	.word	0xffffcfff
 8000a38:	f0ffffff 	.word	0xf0ffffff
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	ffff7fff 	.word	0xffff7fff
 8000a44:	fffff7ff 	.word	0xfffff7ff
 8000a48:	ffffdfff 	.word	0xffffdfff

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	4c47      	ldr	r4, [pc, #284]	; (8000b6c <main+0x120>)
 8000a50:	44a5      	add	sp, r4
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t LTX_BUF[255]="4321";
 8000a54:	4b46      	ldr	r3, [pc, #280]	; (8000b70 <main+0x124>)
 8000a56:	2282      	movs	r2, #130	; 0x82
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	18ba      	adds	r2, r7, r2
 8000a5c:	18d1      	adds	r1, r2, r3
 8000a5e:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <main+0x128>)
 8000a60:	000b      	movs	r3, r1
 8000a62:	6810      	ldr	r0, [r2, #0]
 8000a64:	6018      	str	r0, [r3, #0]
 8000a66:	7912      	ldrb	r2, [r2, #4]
 8000a68:	711a      	strb	r2, [r3, #4]
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	18cb      	adds	r3, r1, r3
 8000a6e:	22fa      	movs	r2, #250	; 0xfa
 8000a70:	2100      	movs	r1, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f9fa 	bl	8000e6c <memset>
	uint8_t LRX_BUF[255]={0};
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <main+0x12c>)
 8000a7a:	2282      	movs	r2, #130	; 0x82
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4694      	mov	ip, r2
 8000a80:	44bc      	add	ip, r7
 8000a82:	4463      	add	r3, ip
 8000a84:	0018      	movs	r0, r3
 8000a86:	23ff      	movs	r3, #255	; 0xff
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f000 f9ee 	bl	8000e6c <memset>
	uint8_t LTX_BUF_SIZE = 4;
 8000a90:	4c3a      	ldr	r4, [pc, #232]	; (8000b7c <main+0x130>)
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2204      	movs	r2, #4
 8000a96:	701a      	strb	r2, [r3, #0]
	uint8_t LRX_BUF_SIZE = 0;
 8000a98:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <main+0x134>)
 8000a9a:	2282      	movs	r2, #130	; 0x82
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	44bc      	add	ip, r7
 8000aa2:	4463      	add	r3, ip
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]

	uint8_t isReceived = 0;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <main+0x138>)
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

  /* Configure the system clock */


  /* USER CODE BEGIN SysInit */
	clockInit();
 8000ab0:	f000 f8c6 	bl	8000c40 <clockInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	initSPI1();
 8000ab4:	f7ff fea8 	bl	8000808 <initSPI1>
	SX1276Init();
 8000ab8:	f7ff fb4c 	bl	8000154 <SX1276Init>
	SX1276_Init();
 8000abc:	f7ff fd80 	bl	80005c0 <SX1276_Init>

//	Delay(0xFFFFF);
	SX1276_SendTXBUF(LTX_BUF, LTX_BUF_SIZE);
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	1d7b      	adds	r3, r7, #5
 8000ac6:	33ff      	adds	r3, #255	; 0xff
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fe1a 	bl	8000704 <SX1276_SendTXBUF>
	SX1276_CleanBuffer();
 8000ad0:	f7ff fe72 	bl	80007b8 <SX1276_CleanBuffer>

//-----------Set PA1 and PA2 for RF switch to receive--------
	GPIOA->ODR |= GPIO_ODR_OD1;
 8000ad4:	23a0      	movs	r3, #160	; 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	2102      	movs	r1, #2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= GPIO_ODR_OD2;
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	2104      	movs	r1, #4
 8000af0:	430a      	orrs	r2, r1
 8000af2:	615a      	str	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isDIO_0_Flag)
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <main+0x13c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0fb      	beq.n	8000af4 <main+0xa8>
	  {
		  isReceived = SX1276_ReadRXBUF(LRX_BUF, &LRX_BUF_SIZE);
 8000afc:	4d21      	ldr	r5, [pc, #132]	; (8000b84 <main+0x138>)
 8000afe:	197c      	adds	r4, r7, r5
 8000b00:	1cfa      	adds	r2, r7, #3
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fdac 	bl	8000664 <SX1276_ReadRXBUF>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	7023      	strb	r3, [r4, #0]
		  if(isReceived)
 8000b10:	197b      	adds	r3, r7, r5
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d024      	beq.n	8000b62 <main+0x116>
		  {
//-----------Reset PA1 and PA2 for RF switch to transmit--------
			  setRFSwitch(0);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 f84b 	bl	8000bb4 <setRFSwitch>
			  GPIOA->ODR &= ~GPIO_ODR_OD1;
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	23a0      	movs	r3, #160	; 0xa0
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	2102      	movs	r1, #2
 8000b2a:	438a      	bics	r2, r1
 8000b2c:	615a      	str	r2, [r3, #20]
			  GPIOA->ODR &= ~GPIO_ODR_OD2;
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2104      	movs	r1, #4
 8000b3a:	438a      	bics	r2, r1
 8000b3c:	615a      	str	r2, [r3, #20]
//--------------------------------------------------------------
			  SX1276_SendTXBUF(LTX_BUF, LTX_BUF_SIZE);
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <main+0x130>)
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	1d7b      	adds	r3, r7, #5
 8000b46:	33ff      	adds	r3, #255	; 0xff
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fdda 	bl	8000704 <SX1276_SendTXBUF>
			  SX1276_CleanBuffer();
 8000b50:	f7ff fe32 	bl	80007b8 <SX1276_CleanBuffer>
			  isReceived = 0;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <main+0x138>)
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
			  setRFSwitch(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 f829 	bl	8000bb4 <setRFSwitch>
		  }
		  isDIO_0_Flag = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <main+0x13c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	  if(isDIO_0_Flag)
 8000b68:	e7c4      	b.n	8000af4 <main+0xa8>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	fffffdf8 	.word	0xfffffdf8
 8000b70:	fffffefc 	.word	0xfffffefc
 8000b74:	08000e94 	.word	0x08000e94
 8000b78:	fffffdfc 	.word	0xfffffdfc
 8000b7c:	00000207 	.word	0x00000207
 8000b80:	fffffdfb 	.word	0xfffffdfb
 8000b84:	00000206 	.word	0x00000206
 8000b88:	2000001c 	.word	0x2000001c

08000b8c <EXTI4_15_IRQHandler>:
  */

/* USER CODE BEGIN 4 */

//interrupt from DIO0 SX1276 on PB10
void EXTI4_15_IRQHandler(void){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

	isDIO_0_Flag = 1;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <EXTI4_15_IRQHandler+0x20>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	EXTI->PR |= EXTI_PR_PR10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <EXTI4_15_IRQHandler+0x24>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <EXTI4_15_IRQHandler+0x24>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	00c9      	lsls	r1, r1, #3
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]

}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <setRFSwitch>:

//-----------Set PA1 and PA2 for RF switch to receive--------
//---0 - Transmitter;
//---1 - Receiver.
void setRFSwitch(uint8_t isReceiver){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]

	if(isReceiver)
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d010      	beq.n	8000bea <setRFSwitch+0x36>
	{
		GPIOA->ODR |= GPIO_ODR_OD1;
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= GPIO_ODR_OD2;
 8000bd8:	23a0      	movs	r3, #160	; 0xa0
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2104      	movs	r1, #4
 8000be4:	430a      	orrs	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
	else
	{
		GPIOA->ODR &= ~GPIO_ODR_OD1;
		GPIOA->ODR &= ~GPIO_ODR_OD2;
	}
}
 8000be8:	e00f      	b.n	8000c0a <setRFSwitch+0x56>
		GPIOA->ODR &= ~GPIO_ODR_OD1;
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	23a0      	movs	r3, #160	; 0xa0
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~GPIO_ODR_OD2;
 8000bfa:	23a0      	movs	r3, #160	; 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	23a0      	movs	r3, #160	; 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2104      	movs	r1, #4
 8000c06:	438a      	bics	r2, r1
 8000c08:	615a      	str	r2, [r3, #20]
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <HardFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <clockInit>:

/*************************************************Variables***********************************/

/**********************************************Use functions***********************************/
int clockInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	RCC->CIER |= RCC_CIER_HSERDYIE; // HSE ready interrupt enabled
 8000c44:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <clockInit+0x104>)
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <clockInit+0x104>)
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	611a      	str	r2, [r3, #16]
	RCC->CIER |= RCC_CIER_PLLRDYIE; //PLL lock interrupt enabled
 8000c50:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <clockInit+0x104>)
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <clockInit+0x104>)
 8000c56:	2110      	movs	r1, #16
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	611a      	str	r2, [r3, #16]
	RCC->CR |= RCC_CR_CSSHSEON | RCC_CR_HSEON; // set HSE calibration check and enable HSE clock
 8000c5c:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <clockInit+0x104>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <clockInit+0x104>)
 8000c62:	2190      	movs	r1, #144	; 0x90
 8000c64:	0309      	lsls	r1, r1, #12
 8000c66:	430a      	orrs	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
	while((RCC->CIER & RCC_CIFR_HSERDYF) == 0); //Wait until HSERDYF is set
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <clockInit+0x104>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	2208      	movs	r2, #8
 8000c72:	4013      	ands	r3, r2
 8000c74:	d0fa      	beq.n	8000c6c <clockInit+0x2c>

	RCC->CICR |= RCC_CICR_HSERDYC; //Clear the flag HSE ready
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <clockInit+0x104>)
 8000c78:	699a      	ldr	r2, [r3, #24]
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <clockInit+0x104>)
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	619a      	str	r2, [r3, #24]

	RCC->CR &= ~RCC_CR_PLLON; //Disable the PLL
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <clockInit+0x104>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <clockInit+0x104>)
 8000c88:	492f      	ldr	r1, [pc, #188]	; (8000d48 <clockInit+0x108>)
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
	while((RCC->CR & RCC_CR_PLLRDY) != 0); //Wait until PLLRDY is cleared
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <clockInit+0x104>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	049b      	lsls	r3, r3, #18
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d1f9      	bne.n	8000c90 <clockInit+0x50>

	FLASH->ACR |= FLASH_ACR_LATENCY; //Set latency to 1 wait state
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <clockInit+0x10c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <clockInit+0x10c>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

	//---------Set 32 MHz by 12 MHz HSE --------------//
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE; //HSE is input clock for PLL
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <clockInit+0x104>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <clockInit+0x104>)
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PLLMUL8; //HSE * 8 = PLL
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <clockInit+0x104>)
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <clockInit+0x104>)
 8000cbc:	21c0      	movs	r1, #192	; 0xc0
 8000cbe:	0309      	lsls	r1, r1, #12
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PLLDIV3; //PLL / 3
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <clockInit+0x104>)
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <clockInit+0x104>)
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0409      	lsls	r1, r1, #16
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	60da      	str	r2, [r3, #12]
	//------------------------------------------------//

	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; //AHB = PLL / 1
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <clockInit+0x104>)
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <clockInit+0x104>)
 8000cd6:	68d2      	ldr	r2, [r2, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; //APB2 = AHB / 1
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <clockInit+0x104>)
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <clockInit+0x104>)
 8000cde:	68d2      	ldr	r2, [r2, #12]
 8000ce0:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; //APB1 = AHB / 1
 8000ce2:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <clockInit+0x104>)
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <clockInit+0x104>)
 8000ce6:	68d2      	ldr	r2, [r2, #12]
 8000ce8:	60da      	str	r2, [r3, #12]

	RCC->CR |= RCC_CR_PLLON; //Enable the PLL
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <clockInit+0x104>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <clockInit+0x104>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0449      	lsls	r1, r1, #17
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_PLLRDY) == 0); //Wait until PLLRDY is set
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <clockInit+0x104>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	049b      	lsls	r3, r3, #18
 8000d02:	4013      	ands	r3, r2
 8000d04:	d0f9      	beq.n	8000cfa <clockInit+0xba>

	RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL as system clock
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <clockInit+0x104>)
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <clockInit+0x104>)
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	60da      	str	r2, [r3, #12]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); //Wait until the PLL is switched on
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <clockInit+0x104>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	220c      	movs	r2, #12
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b0c      	cmp	r3, #12
 8000d1e:	d1f9      	bne.n	8000d14 <clockInit+0xd4>

	RCC->CR &= ~RCC_CR_MSION; //Disable the PLL
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <clockInit+0x104>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <clockInit+0x104>)
 8000d26:	490a      	ldr	r1, [pc, #40]	; (8000d50 <clockInit+0x110>)
 8000d28:	400a      	ands	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
	while((RCC->CR & RCC_CR_MSIRDY) != 0); //Wait until PLLRDY is cleared
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <clockInit+0x104>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	d1f9      	bne.n	8000d2e <clockInit+0xee>

	return 0;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40021000 	.word	0x40021000
 8000d48:	feffffff 	.word	0xfeffffff
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	fffffeff 	.word	0xfffffeff

08000d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <SystemInit+0x64>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <SystemInit+0x64>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0049      	lsls	r1, r1, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <SystemInit+0x64>)
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <SystemInit+0x64>)
 8000d6c:	4913      	ldr	r1, [pc, #76]	; (8000dbc <SystemInit+0x68>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <SystemInit+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SystemInit+0x64>)
 8000d78:	4911      	ldr	r1, [pc, #68]	; (8000dc0 <SystemInit+0x6c>)
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <SystemInit+0x64>)
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <SystemInit+0x64>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	438a      	bics	r2, r1
 8000d88:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <SystemInit+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <SystemInit+0x64>)
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <SystemInit+0x70>)
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <SystemInit+0x64>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <SystemInit+0x64>)
 8000d9c:	490a      	ldr	r1, [pc, #40]	; (8000dc8 <SystemInit+0x74>)
 8000d9e:	400a      	ands	r2, r1
 8000da0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SystemInit+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SystemInit+0x78>)
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	0512      	lsls	r2, r2, #20
 8000dae:	609a      	str	r2, [r3, #8]
#endif
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	88ff400c 	.word	0x88ff400c
 8000dc0:	fef6fff6 	.word	0xfef6fff6
 8000dc4:	fffbffff 	.word	0xfffbffff
 8000dc8:	ff02ffff 	.word	0xff02ffff
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000dee:	2300      	movs	r3, #0
  str  r3, [r2]
 8000df0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df2:	3204      	adds	r2, #4

08000df4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <LoopForever+0x16>)
  cmp  r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dfa:	f7ff ffab 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f000 f811 	bl	8000e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fe23 	bl	8000a4c <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
   ldr   r0, =_estack
 8000e08:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000e0c:	08000fb0 	.word	0x08000fb0
  ldr  r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e14:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000e18:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000e1c:	2000003c 	.word	0x2000003c

08000e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_COMP_IRQHandler>
	...

08000e24 <__libc_init_array>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	2600      	movs	r6, #0
 8000e28:	4d0c      	ldr	r5, [pc, #48]	; (8000e5c <__libc_init_array+0x38>)
 8000e2a:	4c0d      	ldr	r4, [pc, #52]	; (8000e60 <__libc_init_array+0x3c>)
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	10a4      	asrs	r4, r4, #2
 8000e30:	42a6      	cmp	r6, r4
 8000e32:	d109      	bne.n	8000e48 <__libc_init_array+0x24>
 8000e34:	2600      	movs	r6, #0
 8000e36:	f000 f821 	bl	8000e7c <_init>
 8000e3a:	4d0a      	ldr	r5, [pc, #40]	; (8000e64 <__libc_init_array+0x40>)
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <__libc_init_array+0x44>)
 8000e3e:	1b64      	subs	r4, r4, r5
 8000e40:	10a4      	asrs	r4, r4, #2
 8000e42:	42a6      	cmp	r6, r4
 8000e44:	d105      	bne.n	8000e52 <__libc_init_array+0x2e>
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	00b3      	lsls	r3, r6, #2
 8000e4a:	58eb      	ldr	r3, [r5, r3]
 8000e4c:	4798      	blx	r3
 8000e4e:	3601      	adds	r6, #1
 8000e50:	e7ee      	b.n	8000e30 <__libc_init_array+0xc>
 8000e52:	00b3      	lsls	r3, r6, #2
 8000e54:	58eb      	ldr	r3, [r5, r3]
 8000e56:	4798      	blx	r3
 8000e58:	3601      	adds	r6, #1
 8000e5a:	e7f2      	b.n	8000e42 <__libc_init_array+0x1e>
 8000e5c:	08000fa8 	.word	0x08000fa8
 8000e60:	08000fa8 	.word	0x08000fa8
 8000e64:	08000fa8 	.word	0x08000fa8
 8000e68:	08000fac 	.word	0x08000fac

08000e6c <memset>:
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	1812      	adds	r2, r2, r0
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d100      	bne.n	8000e76 <memset+0xa>
 8000e74:	4770      	bx	lr
 8000e76:	7019      	strb	r1, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	e7f9      	b.n	8000e70 <memset+0x4>

08000e7c <_init>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr

08000e88 <_fini>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr
