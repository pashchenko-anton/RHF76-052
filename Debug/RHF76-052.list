
RHF76-052.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad8  08001ad8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad8  08001ad8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad8  08001ad8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad8  08001ad8  00011ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001adc  08001adc  00011adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000064  08001b44  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001b44  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004245  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d2d  00000000  00000000  000242d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e8  00000000  00000000  00025000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  000251e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b7a6  00000000  00000000  00025348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000033bf  00000000  00000000  00030aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00039a4d  00000000  00000000  00033ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006d8fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007a0  00000000  00000000  0006d978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001960 	.word	0x08001960

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08001960 	.word	0x08001960

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <NVIC_EnableIRQ+0x28>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <Delay>:
	REG_LR_HOPPERIOD,			0x00,					//Standart
		 */
};

/**********************************************Use functions***********************************/
void Delay(uint32_t delay){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	for(; delay > 0; delay--);
 8000254:	e002      	b.n	800025c <Delay+0x10>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3b01      	subs	r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1f9      	bne.n	8000256 <Delay+0xa>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <SX1276Init>:

void SX1276Init()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

	//Setup RESET Pin SX1276
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8000270:	4b4e      	ldr	r3, [pc, #312]	; (80003ac <SX1276Init+0x140>)
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	4b4d      	ldr	r3, [pc, #308]	; (80003ac <SX1276Init+0x140>)
 8000276:	2102      	movs	r1, #2
 8000278:	430a      	orrs	r2, r1
 800027a:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER |= GPIO_MODER_MODE11_0; //General purpose output mode
 800027c:	4b4c      	ldr	r3, [pc, #304]	; (80003b0 <SX1276Init+0x144>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b4b      	ldr	r3, [pc, #300]	; (80003b0 <SX1276Init+0x144>)
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	03c9      	lsls	r1, r1, #15
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_11; //Output push-pull
 800028a:	4b49      	ldr	r3, [pc, #292]	; (80003b0 <SX1276Init+0x144>)
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	4b48      	ldr	r3, [pc, #288]	; (80003b0 <SX1276Init+0x144>)
 8000290:	4948      	ldr	r1, [pc, #288]	; (80003b4 <SX1276Init+0x148>)
 8000292:	400a      	ands	r2, r1
 8000294:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEED11; //Very high speed
 8000296:	4b46      	ldr	r3, [pc, #280]	; (80003b0 <SX1276Init+0x144>)
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <SX1276Init+0x144>)
 800029c:	21c0      	movs	r1, #192	; 0xc0
 800029e:	0409      	lsls	r1, r1, #16
 80002a0:	430a      	orrs	r2, r1
 80002a2:	609a      	str	r2, [r3, #8]
	GPIOB->ODR |= GPIO_ODR_OD11;
 80002a4:	4b42      	ldr	r3, [pc, #264]	; (80003b0 <SX1276Init+0x144>)
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	4b41      	ldr	r3, [pc, #260]	; (80003b0 <SX1276Init+0x144>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0109      	lsls	r1, r1, #4
 80002ae:	430a      	orrs	r2, r1
 80002b0:	615a      	str	r2, [r3, #20]

	//-------------Setup RF Switch---------------//
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80002b2:	4b3e      	ldr	r3, [pc, #248]	; (80003ac <SX1276Init+0x140>)
 80002b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002b6:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <SX1276Init+0x140>)
 80002b8:	2101      	movs	r1, #1
 80002ba:	430a      	orrs	r2, r1
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
	//
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1; //General purpose output mode
 80002be:	23a0      	movs	r3, #160	; 0xa0
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2108      	movs	r1, #8
 80002ca:	438a      	bics	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_1; //Output push-pull
 80002ce:	23a0      	movs	r3, #160	; 0xa0
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	23a0      	movs	r3, #160	; 0xa0
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	2102      	movs	r1, #2
 80002da:	438a      	bics	r2, r1
 80002dc:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED1; //Very high speed
 80002de:	23a0      	movs	r3, #160	; 0xa0
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	23a0      	movs	r3, #160	; 0xa0
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	210c      	movs	r1, #12
 80002ea:	430a      	orrs	r2, r1
 80002ec:	609a      	str	r2, [r3, #8]
	GPIOA->ODR &= ~GPIO_ODR_OD1;
 80002ee:	23a0      	movs	r3, #160	; 0xa0
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	23a0      	movs	r3, #160	; 0xa0
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2102      	movs	r1, #2
 80002fa:	438a      	bics	r2, r1
 80002fc:	615a      	str	r2, [r3, #20]
	//
	GPIOA->MODER &= ~GPIO_MODER_MODE2_1; //General purpose output mode
 80002fe:	23a0      	movs	r3, #160	; 0xa0
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	23a0      	movs	r3, #160	; 0xa0
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	2120      	movs	r1, #32
 800030a:	438a      	bics	r2, r1
 800030c:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_2; //Output push-pull
 800030e:	23a0      	movs	r3, #160	; 0xa0
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	23a0      	movs	r3, #160	; 0xa0
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2104      	movs	r1, #4
 800031a:	438a      	bics	r2, r1
 800031c:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED2; //Very high speed
 800031e:	23a0      	movs	r3, #160	; 0xa0
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	23a0      	movs	r3, #160	; 0xa0
 8000326:	05db      	lsls	r3, r3, #23
 8000328:	2130      	movs	r1, #48	; 0x30
 800032a:	430a      	orrs	r2, r1
 800032c:	609a      	str	r2, [r3, #8]
	GPIOA->ODR &= ~GPIO_ODR_OD2;
 800032e:	23a0      	movs	r3, #160	; 0xa0
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	695a      	ldr	r2, [r3, #20]
 8000334:	23a0      	movs	r3, #160	; 0xa0
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	2104      	movs	r1, #4
 800033a:	438a      	bics	r2, r1
 800033c:	615a      	str	r2, [r3, #20]
	//-------------------------------------------//

	//Setup interrupt from PB10 - DIO0 from SX1276
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <SX1276Init+0x140>)
 8000340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <SX1276Init+0x140>)
 8000344:	2101      	movs	r1, #1
 8000346:	430a      	orrs	r2, r1
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <SX1276Init+0x144>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <SX1276Init+0x144>)
 8000350:	4919      	ldr	r1, [pc, #100]	; (80003b8 <SX1276Init+0x14c>)
 8000352:	400a      	ands	r2, r1
 8000354:	601a      	str	r2, [r3, #0]
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI10_PB;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <SX1276Init+0x150>)
 8000358:	691a      	ldr	r2, [r3, #16]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <SX1276Init+0x150>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	0049      	lsls	r1, r1, #1
 8000360:	430a      	orrs	r2, r1
 8000362:	611a      	str	r2, [r3, #16]
	EXTI->IMR |= EXTI_IMR_IM10;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <SX1276Init+0x154>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <SX1276Init+0x154>)
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	00c9      	lsls	r1, r1, #3
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= EXTI_RTSR_RT10;
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <SX1276Init+0x154>)
 8000374:	689a      	ldr	r2, [r3, #8]
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <SX1276Init+0x154>)
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	00c9      	lsls	r1, r1, #3
 800037c:	430a      	orrs	r2, r1
 800037e:	609a      	str	r2, [r3, #8]
	EXTI->PR |= EXTI_PR_PIF10;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <SX1276Init+0x154>)
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <SX1276Init+0x154>)
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	00c9      	lsls	r1, r1, #3
 800038a:	430a      	orrs	r2, r1
 800038c:	615a      	str	r2, [r3, #20]
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 800038e:	2007      	movs	r0, #7
 8000390:	f7ff ff46 	bl	8000220 <NVIC_EnableIRQ>

	CS_HI();
 8000394:	23a0      	movs	r3, #160	; 0xa0
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	699a      	ldr	r2, [r3, #24]
 800039a:	23a0      	movs	r3, #160	; 0xa0
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	2110      	movs	r1, #16
 80003a0:	430a      	orrs	r2, r1
 80003a2:	619a      	str	r2, [r3, #24]

}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40021000 	.word	0x40021000
 80003b0:	50000400 	.word	0x50000400
 80003b4:	fffff7ff 	.word	0xfffff7ff
 80003b8:	ffcfffff 	.word	0xffcfffff
 80003bc:	40010000 	.word	0x40010000
 80003c0:	40010400 	.word	0x40010400

080003c4 <SX1276_WriteSingle>:

uint8_t SX1276_WriteSingle(uint8_t command,uint8_t value)
{//WriteSingle
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	0002      	movs	r2, r0
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	701a      	strb	r2, [r3, #0]
 80003d0:	1dbb      	adds	r3, r7, #6
 80003d2:	1c0a      	adds	r2, r1, #0
 80003d4:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	CS_LO();
 80003d6:	23a0      	movs	r3, #160	; 0xa0
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003dc:	23a0      	movs	r3, #160	; 0xa0
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	2110      	movs	r1, #16
 80003e2:	430a      	orrs	r2, r1
 80003e4:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOA->IDR & MISO){};							//waiting until CC1101 ready

	while (!(SPI1->SR & SPI_SR_TXE)){};
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	4b23      	ldr	r3, [pc, #140]	; (8000478 <SX1276_WriteSingle+0xb4>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	2202      	movs	r2, #2
 80003ee:	4013      	ands	r3, r2
 80003f0:	d0fa      	beq.n	80003e8 <SX1276_WriteSingle+0x24>
	SPI1_DR_8bit = (WRITE_SINGLE | command);
 80003f2:	4922      	ldr	r1, [pc, #136]	; (800047c <SX1276_WriteSingle+0xb8>)
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2280      	movs	r2, #128	; 0x80
 80003fa:	4252      	negs	r2, r2
 80003fc:	4313      	orrs	r3, r2
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	700b      	strb	r3, [r1, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <SX1276_WriteSingle+0xb4>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	4013      	ands	r3, r2
 800040c:	d1fa      	bne.n	8000404 <SX1276_WriteSingle+0x40>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <SX1276_WriteSingle+0xb4>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	2201      	movs	r2, #1
 8000416:	4013      	ands	r3, r2
 8000418:	d0fa      	beq.n	8000410 <SX1276_WriteSingle+0x4c>
	temp=SPI1_DR_8bit;
 800041a:	4a18      	ldr	r2, [pc, #96]	; (800047c <SX1276_WriteSingle+0xb8>)
 800041c:	230f      	movs	r3, #15
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	7812      	ldrb	r2, [r2, #0]
 8000422:	701a      	strb	r2, [r3, #0]

	while (!(SPI1->SR & SPI_SR_TXE)){};
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <SX1276_WriteSingle+0xb4>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	2202      	movs	r2, #2
 800042c:	4013      	ands	r3, r2
 800042e:	d0fa      	beq.n	8000426 <SX1276_WriteSingle+0x62>
	SPI1_DR_8bit = value;
 8000430:	4a12      	ldr	r2, [pc, #72]	; (800047c <SX1276_WriteSingle+0xb8>)
 8000432:	1dbb      	adds	r3, r7, #6
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <SX1276_WriteSingle+0xb4>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	4013      	ands	r3, r2
 8000442:	d1fa      	bne.n	800043a <SX1276_WriteSingle+0x76>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <SX1276_WriteSingle+0xb4>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	2201      	movs	r2, #1
 800044c:	4013      	ands	r3, r2
 800044e:	d0fa      	beq.n	8000446 <SX1276_WriteSingle+0x82>
	temp=SPI1_DR_8bit;
 8000450:	4a0a      	ldr	r2, [pc, #40]	; (800047c <SX1276_WriteSingle+0xb8>)
 8000452:	200f      	movs	r0, #15
 8000454:	183b      	adds	r3, r7, r0
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	701a      	strb	r2, [r3, #0]

	CS_HI();
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	23a0      	movs	r3, #160	; 0xa0
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2110      	movs	r1, #16
 8000466:	430a      	orrs	r2, r1
 8000468:	619a      	str	r2, [r3, #24]
	return temp;
 800046a:	183b      	adds	r3, r7, r0
 800046c:	781b      	ldrb	r3, [r3, #0]
}
 800046e:	0018      	movs	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	b004      	add	sp, #16
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40013000 	.word	0x40013000
 800047c:	4001300c 	.word	0x4001300c

08000480 <SX1276_ReadSingle>:

uint8_t SX1276_ReadSingle(uint8_t command)
{//ReadSingle
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	0002      	movs	r2, r0
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	CS_LO();
 800048c:	23a0      	movs	r3, #160	; 0xa0
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000492:	23a0      	movs	r3, #160	; 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	2110      	movs	r1, #16
 8000498:	430a      	orrs	r2, r1
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOB->IDR & MISO){};							//waiting until CC1101 ready

	while (!(SPI1->SR & SPI_SR_TXE)){};
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <SX1276_ReadSingle+0xa0>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	2202      	movs	r2, #2
 80004a4:	4013      	ands	r3, r2
 80004a6:	d0fa      	beq.n	800049e <SX1276_ReadSingle+0x1e>
	SPI1_DR_8bit = (command | READ_SINGLE);
 80004a8:	4a1e      	ldr	r2, [pc, #120]	; (8000524 <SX1276_ReadSingle+0xa4>)
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <SX1276_ReadSingle+0xa0>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	4013      	ands	r3, r2
 80004ba:	d1fa      	bne.n	80004b2 <SX1276_ReadSingle+0x32>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <SX1276_ReadSingle+0xa0>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	d0fa      	beq.n	80004be <SX1276_ReadSingle+0x3e>
	command = SPI1_DR_8bit;
 80004c8:	4a16      	ldr	r2, [pc, #88]	; (8000524 <SX1276_ReadSingle+0xa4>)
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	701a      	strb	r2, [r3, #0]
	while (!(SPI1->SR & SPI_SR_TXE)){};
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <SX1276_ReadSingle+0xa0>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	2202      	movs	r2, #2
 80004d8:	4013      	ands	r3, r2
 80004da:	d0fa      	beq.n	80004d2 <SX1276_ReadSingle+0x52>
	SPI1_DR_8bit = 0x00;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <SX1276_ReadSingle+0xa4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <SX1276_ReadSingle+0xa0>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	4013      	ands	r3, r2
 80004ec:	d1fa      	bne.n	80004e4 <SX1276_ReadSingle+0x64>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <SX1276_ReadSingle+0xa0>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	2201      	movs	r2, #1
 80004f6:	4013      	ands	r3, r2
 80004f8:	d0fa      	beq.n	80004f0 <SX1276_ReadSingle+0x70>
	temp = SPI1_DR_8bit;
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <SX1276_ReadSingle+0xa4>)
 80004fc:	200f      	movs	r0, #15
 80004fe:	183b      	adds	r3, r7, r0
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	701a      	strb	r2, [r3, #0]

	CS_HI();
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	699a      	ldr	r2, [r3, #24]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2110      	movs	r1, #16
 8000510:	430a      	orrs	r2, r1
 8000512:	619a      	str	r2, [r3, #24]
	return temp;
 8000514:	183b      	adds	r3, r7, r0
 8000516:	781b      	ldrb	r3, [r3, #0]
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40013000 	.word	0x40013000
 8000524:	4001300c 	.word	0x4001300c

08000528 <SX1276_WriteBurst>:
void SX1276_WriteBurst( uint8_t addr, char *buff, uint8_t size )
{//WriteBurst
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6039      	str	r1, [r7, #0]
 8000530:	0011      	movs	r1, r2
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	1c02      	adds	r2, r0, #0
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]

	uint8_t j_;
	CS_LO();
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	2110      	movs	r1, #16
 800054a:	430a      	orrs	r2, r1
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOA->IDR & MISO){};							//waiting until CC1101 ready
	while (!(SPI1->SR & SPI_SR_TXE)){};
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <SX1276_WriteBurst+0xd4>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	2202      	movs	r2, #2
 8000556:	4013      	ands	r3, r2
 8000558:	d0fa      	beq.n	8000550 <SX1276_WriteBurst+0x28>
	SPI1_DR_8bit = (addr | WRITE_SINGLE);
 800055a:	4929      	ldr	r1, [pc, #164]	; (8000600 <SX1276_WriteBurst+0xd8>)
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	4252      	negs	r2, r2
 8000564:	4313      	orrs	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	700b      	strb	r3, [r1, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <SX1276_WriteBurst+0xd4>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	4013      	ands	r3, r2
 8000574:	d1fa      	bne.n	800056c <SX1276_WriteBurst+0x44>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <SX1276_WriteBurst+0xd4>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	d0fa      	beq.n	8000578 <SX1276_WriteBurst+0x50>
	SPI1_DR_8bit;
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SX1276_WriteBurst+0xd8>)
 8000584:	781b      	ldrb	r3, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 8000586:	230f      	movs	r3, #15
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	e021      	b.n	80005d4 <SX1276_WriteBurst+0xac>
	{
		while (!(SPI1->SR & SPI_SR_TXE)){};
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <SX1276_WriteBurst+0xd4>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	2202      	movs	r2, #2
 8000598:	4013      	ands	r3, r2
 800059a:	d0fa      	beq.n	8000592 <SX1276_WriteBurst+0x6a>
		SPI1_DR_8bit = buff[j_];
 800059c:	230f      	movs	r3, #15
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	18d3      	adds	r3, r2, r3
 80005a6:	4a16      	ldr	r2, [pc, #88]	; (8000600 <SX1276_WriteBurst+0xd8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	7013      	strb	r3, [r2, #0]
		while (SPI1->SR & SPI_SR_BSY){};
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <SX1276_WriteBurst+0xd4>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	4013      	ands	r3, r2
 80005b6:	d1fa      	bne.n	80005ae <SX1276_WriteBurst+0x86>
		while (!(SPI1->SR & SPI_SR_RXNE)){};
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <SX1276_WriteBurst+0xd4>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	d0fa      	beq.n	80005ba <SX1276_WriteBurst+0x92>
		SPI1_DR_8bit;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <SX1276_WriteBurst+0xd8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 80005c8:	210f      	movs	r1, #15
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	3201      	adds	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	230f      	movs	r3, #15
 80005d6:	18fa      	adds	r2, r7, r3
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d3d6      	bcc.n	8000590 <SX1276_WriteBurst+0x68>
	}
	CS_HI();
 80005e2:	23a0      	movs	r3, #160	; 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	699a      	ldr	r2, [r3, #24]
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2110      	movs	r1, #16
 80005ee:	430a      	orrs	r2, r1
 80005f0:	619a      	str	r2, [r3, #24]
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b004      	add	sp, #16
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40013000 	.word	0x40013000
 8000600:	4001300c 	.word	0x4001300c

08000604 <SX1276_ReadBurst>:
void SX1276_ReadBurst( uint8_t cmd, char *buff, uint8_t size )
{//ReadBurst
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6039      	str	r1, [r7, #0]
 800060c:	0011      	movs	r1, r2
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	1c02      	adds	r2, r0, #0
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	1dbb      	adds	r3, r7, #6
 8000616:	1c0a      	adds	r2, r1, #0
 8000618:	701a      	strb	r2, [r3, #0]

	uint8_t j_;
	CS_LO();
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2110      	movs	r1, #16
 8000626:	430a      	orrs	r2, r1
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
	//while (GPIOA->IDR & MISO){};							//waiting until CC1101 ready
	while (!(SPI1->SR & SPI_SR_TXE)){};
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SX1276_ReadBurst+0xcc>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	2202      	movs	r2, #2
 8000632:	4013      	ands	r3, r2
 8000634:	d0fa      	beq.n	800062c <SX1276_ReadBurst+0x28>
	SPI1_DR_8bit = (cmd | READ_SINGLE);
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SX1276_ReadBurst+0xd0>)
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	7013      	strb	r3, [r2, #0]
	while (SPI1->SR & SPI_SR_BSY){};
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <SX1276_ReadBurst+0xcc>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	4013      	ands	r3, r2
 8000648:	d1fa      	bne.n	8000640 <SX1276_ReadBurst+0x3c>
	while (!(SPI1->SR & SPI_SR_RXNE)){};
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <SX1276_ReadBurst+0xcc>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	2201      	movs	r2, #1
 8000652:	4013      	ands	r3, r2
 8000654:	d0fa      	beq.n	800064c <SX1276_ReadBurst+0x48>
	SPI1_DR_8bit;
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SX1276_ReadBurst+0xd0>)
 8000658:	781b      	ldrb	r3, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 800065a:	230f      	movs	r3, #15
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e022      	b.n	80006aa <SX1276_ReadBurst+0xa6>
	{
		while (!(SPI1->SR & SPI_SR_TXE)){};
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <SX1276_ReadBurst+0xcc>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	2202      	movs	r2, #2
 800066c:	4013      	ands	r3, r2
 800066e:	d0fa      	beq.n	8000666 <SX1276_ReadBurst+0x62>
		SPI1_DR_8bit = 0x00;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <SX1276_ReadBurst+0xd0>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
		while (SPI1->SR & SPI_SR_BSY){};
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <SX1276_ReadBurst+0xcc>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4013      	ands	r3, r2
 8000680:	d1fa      	bne.n	8000678 <SX1276_ReadBurst+0x74>
		while (!(SPI1->SR & SPI_SR_RXNE)){};
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <SX1276_ReadBurst+0xcc>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	2201      	movs	r2, #1
 800068a:	4013      	ands	r3, r2
 800068c:	d0fa      	beq.n	8000684 <SX1276_ReadBurst+0x80>
		buff[j_] = SPI1_DR_8bit;
 800068e:	4911      	ldr	r1, [pc, #68]	; (80006d4 <SX1276_ReadBurst+0xd0>)
 8000690:	200f      	movs	r0, #15
 8000692:	183b      	adds	r3, r7, r0
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	18d3      	adds	r3, r2, r3
 800069a:	780a      	ldrb	r2, [r1, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	701a      	strb	r2, [r3, #0]
	for( j_ = 0; j_ < size; j_ ++ )
 80006a0:	183b      	adds	r3, r7, r0
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	3201      	adds	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	230f      	movs	r3, #15
 80006ac:	18fa      	adds	r2, r7, r3
 80006ae:	1dbb      	adds	r3, r7, #6
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3d5      	bcc.n	8000664 <SX1276_ReadBurst+0x60>
	}
	CS_HI();
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	23a0      	movs	r3, #160	; 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2110      	movs	r1, #16
 80006c4:	430a      	orrs	r2, r1
 80006c6:	619a      	str	r2, [r3, #24]
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b004      	add	sp, #16
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013000 	.word	0x40013000
 80006d4:	4001300c 	.word	0x4001300c

080006d8 <SX1276_Init>:
void SX1276_Init(void)
{//CC1101_Init
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t qnt,i_temp=0;
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	qnt=sizeof (LoRa_config);
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	2214      	movs	r2, #20
 80006e8:	701a      	strb	r2, [r3, #0]

	SX1276_RES();
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <SX1276_Init+0x98>)
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SX1276_Init+0x98>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0109      	lsls	r1, r1, #4
 80006f4:	430a      	orrs	r2, r1
 80006f6:	619a      	str	r2, [r3, #24]
	Delay(0xFFF);
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <SX1276_Init+0x9c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fda6 	bl	800024c <Delay>
	SX1276_REL();
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <SX1276_Init+0x98>)
 8000702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <SX1276_Init+0x98>)
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0109      	lsls	r1, r1, #4
 800070a:	430a      	orrs	r2, r1
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
	Delay(0xFFF);
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SX1276_Init+0x9c>)
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fd9b 	bl	800024c <Delay>

//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
	while (i_temp < qnt)
 8000716:	e010      	b.n	800073a <SX1276_Init+0x62>
	{
		SX1276_WriteSingle(LoRa_config[i_temp],LoRa_config[i_temp+1]);
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <SX1276_Init+0xa0>)
 800071e:	5cd0      	ldrb	r0, [r2, r3]
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <SX1276_Init+0xa0>)
 8000728:	5cd3      	ldrb	r3, [r2, r3]
 800072a:	0019      	movs	r1, r3
 800072c:	f7ff fe4a 	bl	80003c4 <SX1276_WriteSingle>
		i_temp+=2;
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	1dfa      	adds	r2, r7, #7
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	3202      	adds	r2, #2
 8000738:	701a      	strb	r2, [r3, #0]
	while (i_temp < qnt)
 800073a:	1dfa      	adds	r2, r7, #7
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3e8      	bcc.n	8000718 <SX1276_Init+0x40>
	}
	SX1276_WriteSingle(REG_LR_DIOMAPPING1,	RFLR_DIOMAPPING1_DIO0_00);
 8000746:	2100      	movs	r1, #0
 8000748:	2040      	movs	r0, #64	; 0x40
 800074a:	f7ff fe3b 	bl	80003c4 <SX1276_WriteSingle>

	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fe37 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	2012      	movs	r0, #18
 800075a:	f7ff fe33 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER|0x80); // set scan receiver mod
 800075e:	2185      	movs	r1, #133	; 0x85
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fe2f 	bl	80003c4 <SX1276_WriteSingle>
//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER_SINGLE|0x80);
//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER);
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	50000400 	.word	0x50000400
 8000774:	00000fff 	.word	0x00000fff
 8000778:	08001a90 	.word	0x08001a90

0800077c <SX1276_ReadRXBUF>:

uint8_t SX1276_ReadRXBUF (char RX_BUF[], uint8_t* RX_BUF_SIZE)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]

	uint8_t isReceived = 0;
 8000786:	230f      	movs	r3, #15
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
	int flags = SX1276_ReadSingle(REG_LR_IRQFLAGS);
 800078e:	2012      	movs	r0, #18
 8000790:	f7ff fe76 	bl	8000480 <SX1276_ReadSingle>
 8000794:	0003      	movs	r3, r0
 8000796:	60bb      	str	r3, [r7, #8]
	if((flags & RFLR_IRQFLAGS_RXDONE) || (flags & RFLR_IRQFLAGS_VALIDHEADER))
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2240      	movs	r2, #64	; 0x40
 800079c:	4013      	ands	r3, r2
 800079e:	d103      	bne.n	80007a8 <SX1276_ReadRXBUF+0x2c>
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2210      	movs	r2, #16
 80007a4:	4013      	ands	r3, r2
 80007a6:	d027      	beq.n	80007f8 <SX1276_ReadRXBUF+0x7c>
	{
		rx_bytes= SX1276_ReadSingle(REG_LR_RXNBBYTES);
 80007a8:	2013      	movs	r0, #19
 80007aa:	f7ff fe69 	bl	8000480 <SX1276_ReadSingle>
 80007ae:	0003      	movs	r3, r0
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <SX1276_ReadRXBUF+0x94>)
 80007b4:	701a      	strb	r2, [r3, #0]
		if(rx_bytes > 0)
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <SX1276_ReadRXBUF+0x94>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d01c      	beq.n	80007f8 <SX1276_ReadRXBUF+0x7c>
		{
			rssi=SX1276_ReadSingle(REG_LR_PKTRSSIVALUE);
 80007be:	201a      	movs	r0, #26
 80007c0:	f7ff fe5e 	bl	8000480 <SX1276_ReadSingle>
 80007c4:	0003      	movs	r3, r0
 80007c6:	b25a      	sxtb	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <SX1276_ReadRXBUF+0x98>)
 80007ca:	701a      	strb	r2, [r3, #0]
			snr= SX1276_ReadSingle(REG_LR_PKTSNRVALUE);
 80007cc:	2019      	movs	r0, #25
 80007ce:	f7ff fe57 	bl	8000480 <SX1276_ReadSingle>
 80007d2:	0003      	movs	r3, r0
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <SX1276_ReadRXBUF+0x9c>)
 80007d8:	701a      	strb	r2, [r3, #0]
			SX1276_ReadBurst( REG_LR_FIFO, RX_BUF, rx_bytes);
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <SX1276_ReadRXBUF+0x94>)
 80007dc:	781a      	ldrb	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	0019      	movs	r1, r3
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ff0e 	bl	8000604 <SX1276_ReadBurst>
			*RX_BUF_SIZE = rx_bytes;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <SX1276_ReadRXBUF+0x94>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	701a      	strb	r2, [r3, #0]
			isReceived = 1;
 80007f0:	230f      	movs	r3, #15
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
		}
	}
	SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
 80007f8:	21ff      	movs	r1, #255	; 0xff
 80007fa:	2012      	movs	r0, #18
 80007fc:	f7ff fde2 	bl	80003c4 <SX1276_WriteSingle>

	return isReceived;
 8000800:	230f      	movs	r3, #15
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	781b      	ldrb	r3, [r3, #0]
}
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	200000a6 	.word	0x200000a6
 8000814:	200000a7 	.word	0x200000a7
 8000818:	200000a8 	.word	0x200000a8

0800081c <SX1276_SendTXBUF>:

void SX1276_SendTXBUF (uint8_t TX_BUF [], uint8_t BUF_SIZE)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	000a      	movs	r2, r1
 8000826:	1cfb      	adds	r3, r7, #3
 8000828:	701a      	strb	r2, [r3, #0]
	int txflag=0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
	//	txflag = SX1276_ReadSingle(REG_LR_IRQFLAGS);// & RFLR_IRQFLAGS_TXDONE_MASK;
	SX1276_WriteSingle(REG_LR_DIOMAPPING1,	RFLR_DIOMAPPING1_DIO0_01);
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	2040      	movs	r0, #64	; 0x40
 8000832:	f7ff fdc7 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGS, 0xFF);
 8000836:	21ff      	movs	r1, #255	; 0xff
 8000838:	2012      	movs	r0, #18
 800083a:	f7ff fdc3 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGSMASK, ~RFLR_IRQFLAGS_TXDONE_MASK);
 800083e:	21f7      	movs	r1, #247	; 0xf7
 8000840:	2011      	movs	r0, #17
 8000842:	f7ff fdbf 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOTXBASEADDR, 0);
 8000846:	2100      	movs	r1, #0
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fdbb 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOADDRPTR, 0);
 800084e:	2100      	movs	r1, #0
 8000850:	200d      	movs	r0, #13
 8000852:	f7ff fdb7 	bl	80003c4 <SX1276_WriteSingle>

	SX1276_WriteBurst( REG_LR_FIFO, TX_BUF, BUF_SIZE);
 8000856:	1cfb      	adds	r3, r7, #3
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	0019      	movs	r1, r3
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fe62 	bl	8000528 <SX1276_WriteBurst>
	SX1276_WriteSingle(REG_LR_PAYLOADLENGTH,BUF_SIZE);
 8000864:	1cfb      	adds	r3, r7, #3
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0019      	movs	r1, r3
 800086a:	2022      	movs	r0, #34	; 0x22
 800086c:	f7ff fdaa 	bl	80003c4 <SX1276_WriteSingle>

	SX1276_WriteSingle(REG_LR_SYNCWORD,0x12);
 8000870:	2112      	movs	r1, #18
 8000872:	2039      	movs	r0, #57	; 0x39
 8000874:	f7ff fda6 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_STANDBY|0x80);
 8000878:	2181      	movs	r1, #129	; 0x81
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fda2 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOADDRPTR,0x80);
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	200d      	movs	r0, #13
 8000884:	f7ff fd9e 	bl	80003c4 <SX1276_WriteSingle>
//		Delay(72000);

	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_TRANSMITTER|0x80);
 8000888:	2183      	movs	r1, #131	; 0x83
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fd9a 	bl	80003c4 <SX1276_WriteSingle>

	while(!txflag)
 8000890:	e007      	b.n	80008a2 <SX1276_SendTXBUF+0x86>
	{
		txflag = SX1276_ReadSingle(REG_LR_IRQFLAGS) & RFLR_IRQFLAGS_TXDONE_MASK;
 8000892:	2012      	movs	r0, #18
 8000894:	f7ff fdf4 	bl	8000480 <SX1276_ReadSingle>
 8000898:	0003      	movs	r3, r0
 800089a:	001a      	movs	r2, r3
 800089c:	2308      	movs	r3, #8
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
	while(!txflag)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f4      	beq.n	8000892 <SX1276_SendTXBUF+0x76>
	}
	SX1276_WriteSingle(REG_LR_IRQFLAGSMASK, 0xFF);
 80008a8:	21ff      	movs	r1, #255	; 0xff
 80008aa:	2011      	movs	r0, #17
 80008ac:	f7ff fd8a 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGS,0xFF);
 80008b0:	21ff      	movs	r1, #255	; 0xff
 80008b2:	2012      	movs	r0, #18
 80008b4:	f7ff fd86 	bl	80003c4 <SX1276_WriteSingle>

	SX1276_WriteSingle(REG_LR_DIOMAPPING1,	RFLR_DIOMAPPING1_DIO0_00); //set IRQ for RX_Done
 80008b8:	2100      	movs	r1, #0
 80008ba:	2040      	movs	r0, #64	; 0x40
 80008bc:	f7ff fd82 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_IRQFLAGSMASK, ~RFLR_IRQFLAGS_RXDONE);
 80008c0:	21bf      	movs	r1, #191	; 0xbf
 80008c2:	2011      	movs	r0, #17
 80008c4:	f7ff fd7e 	bl	80003c4 <SX1276_WriteSingle>
	//		while (!LFlag) {};
	//		SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
	//		LFlag=0;


}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b004      	add	sp, #16
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SX1276_CleanBuffer>:

void SX1276_CleanBuffer(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_SLEEP|0x80);
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fd74 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_FIFOADDRPTR,0x00);
 80008dc:	2100      	movs	r1, #0
 80008de:	200d      	movs	r0, #13
 80008e0:	f7ff fd70 	bl	80003c4 <SX1276_WriteSingle>
	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER|0x80);
 80008e4:	2185      	movs	r1, #133	; 0x85
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fd6c 	bl	80003c4 <SX1276_WriteSingle>
//	SX1276_WriteSingle(REG_LR_OPMODE,RFLR_OPMODE_RECEIVER_SINGLE|0x80);
//	Delay(0xFFFFFF);
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <NVIC_EnableIRQ>:
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	231f      	movs	r3, #31
 8000908:	401a      	ands	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <NVIC_EnableIRQ+0x28>)
 800090c:	2101      	movs	r1, #1
 800090e:	4091      	lsls	r1, r2
 8000910:	000a      	movs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	e000e100 	.word	0xe000e100

08000920 <initSPI1>:
//int BufCounter;
//uint8_t RX_FINISHED=0;
/**********************************************Use functions***********************************/

void initSPI1(void)
{//page 769
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	//SPI1
	//PA4 - NSS,  	PA5 - SCK
	//PA6 - MISO, 	PA7 - MOSI

	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000924:	4b86      	ldr	r3, [pc, #536]	; (8000b40 <initSPI1+0x220>)
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	4b85      	ldr	r3, [pc, #532]	; (8000b40 <initSPI1+0x220>)
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c

	//PA5(SCK)  PA7(MOSI) ����� - �������������� �������  push pull, PA6(MISO) ����� - Input floating, PA4(CS) ����� - �����, push-pull
	//clear registers
	GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000930:	23a0      	movs	r3, #160	; 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	23a0      	movs	r3, #160	; 0xa0
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	4982      	ldr	r1, [pc, #520]	; (8000b44 <initSPI1+0x224>)
 800093c:	400a      	ands	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7);
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	21f0      	movs	r1, #240	; 0xf0
 800094c:	438a      	bics	r2, r1
 800094e:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED4 | GPIO_OSPEEDER_OSPEED5 | GPIO_OSPEEDER_OSPEED6 | GPIO_OSPEEDER_OSPEED7);
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	497a      	ldr	r1, [pc, #488]	; (8000b44 <initSPI1+0x224>)
 800095c:	400a      	ands	r2, r1
 800095e:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	4976      	ldr	r1, [pc, #472]	; (8000b44 <initSPI1+0x224>)
 800096c:	400a      	ands	r2, r1
 800096e:	60da      	str	r2, [r3, #12]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	6a1a      	ldr	r2, [r3, #32]
 8000976:	23a0      	movs	r3, #160	; 0xa0
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	0412      	lsls	r2, r2, #16
 800097c:	0c12      	lsrs	r2, r2, #16
 800097e:	621a      	str	r2, [r3, #32]

	//NSS
	GPIOA->MODER |= GPIO_MODER_MODE4_0; //General purpose output mode
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	23a0      	movs	r3, #160	; 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	0049      	lsls	r1, r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_4; //Output push-pull
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	23a0      	movs	r3, #160	; 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2110      	movs	r1, #16
 800099e:	438a      	bics	r2, r1
 80009a0:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED4; //Very high speed
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	21c0      	movs	r1, #192	; 0xc0
 80009ae:	0089      	lsls	r1, r1, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	609a      	str	r2, [r3, #8]
//	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL4; //set AF0 for alternate like SPI1

	//SCK
	GPIOA->MODER |= GPIO_MODER_MODE5_1; //Alternative function
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	0109      	lsls	r1, r1, #4
 80009c2:	430a      	orrs	r2, r1
 80009c4:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5; //Output push-pull
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2120      	movs	r1, #32
 80009d2:	438a      	bics	r2, r1
 80009d4:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED5; //Very high speed
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	21c0      	movs	r1, #192	; 0xc0
 80009e2:	0109      	lsls	r1, r1, #4
 80009e4:	430a      	orrs	r2, r1
 80009e6:	609a      	str	r2, [r3, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5; //set AF0 for alternate like SPI1
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	6a1a      	ldr	r2, [r3, #32]
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	4955      	ldr	r1, [pc, #340]	; (8000b48 <initSPI1+0x228>)
 80009f4:	400a      	ands	r2, r1
 80009f6:	621a      	str	r2, [r3, #32]

	//MISO
	GPIOA->MODER |= GPIO_MODER_MODE6_1; //Alternative function
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	0189      	lsls	r1, r1, #6
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD6; //No pull-up, no pull down
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	23a0      	movs	r3, #160	; 0xa0
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	494d      	ldr	r1, [pc, #308]	; (8000b4c <initSPI1+0x22c>)
 8000a16:	400a      	ands	r2, r1
 8000a18:	60da      	str	r2, [r3, #12]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL6; //set AF0 for alternate like SPI1
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	6a1a      	ldr	r2, [r3, #32]
 8000a20:	23a0      	movs	r3, #160	; 0xa0
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	494a      	ldr	r1, [pc, #296]	; (8000b50 <initSPI1+0x230>)
 8000a26:	400a      	ands	r2, r1
 8000a28:	621a      	str	r2, [r3, #32]

	//MOSI
	GPIOA->MODER |= GPIO_MODER_MODE7_1; //Alternative function
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	23a0      	movs	r3, #160	; 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	0209      	lsls	r1, r1, #8
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_7; //Output push-pull
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	438a      	bics	r2, r1
 8000a4a:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED7; //Very high speed
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	23a0      	movs	r3, #160	; 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	21c0      	movs	r1, #192	; 0xc0
 8000a58:	0209      	lsls	r1, r1, #8
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL7; //set AF0 for alternate like SPI1
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	6a1a      	ldr	r2, [r3, #32]
 8000a64:	23a0      	movs	r3, #160	; 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	0912      	lsrs	r2, r2, #4
 8000a6c:	621a      	str	r2, [r3, #32]

	//Setup SPI1
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <initSPI1+0x220>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <initSPI1+0x220>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0149      	lsls	r1, r1, #5
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
	SPI1->CR1 &= ~SPI_CR1_SPE;			//Disable SPI1
 8000a7c:	4b35      	ldr	r3, [pc, #212]	; (8000b54 <initSPI1+0x234>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <initSPI1+0x234>)
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	438a      	bics	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
	SPI1->CR1 = 0;						//Reset CR1 registers
 8000a88:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <initSPI1+0x234>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

	SPI1->CR1 &= ~SPI_CR1_BR;			//Baud rate = Fpclk/2
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <initSPI1+0x234>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <initSPI1+0x234>)
 8000a94:	2138      	movs	r1, #56	; 0x38
 8000a96:	438a      	bics	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_BIDIMODE;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <initSPI1+0x234>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <initSPI1+0x234>)
 8000aa0:	492d      	ldr	r1, [pc, #180]	; (8000b58 <initSPI1+0x238>)
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_DFF;          //8 bit data
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <initSPI1+0x234>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <initSPI1+0x234>)
 8000aac:	492b      	ldr	r1, [pc, #172]	; (8000b5c <initSPI1+0x23c>)
 8000aae:	400a      	ands	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_CPOL;         //Polarity cls signal CPOL = 0;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <initSPI1+0x234>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <initSPI1+0x234>)
 8000ab8:	2102      	movs	r1, #2
 8000aba:	438a      	bics	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_CPHA;         //Phase cls signal    CPHA = 0;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <initSPI1+0x234>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <initSPI1+0x234>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	438a      	bics	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SSM;  			//Hardware slave management disabled
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <initSPI1+0x234>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <initSPI1+0x234>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0089      	lsls	r1, r1, #2
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SSI;			//Master NSS is high
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <initSPI1+0x234>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <initSPI1+0x234>)
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	0049      	lsls	r1, r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_LSBFIRST;     //MSB will be first
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <initSPI1+0x234>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <initSPI1+0x234>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	438a      	bics	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~SPI_CR1_CRCEN;		//CRC disabled
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <initSPI1+0x234>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <initSPI1+0x234>)
 8000af8:	4919      	ldr	r1, [pc, #100]	; (8000b60 <initSPI1+0x240>)
 8000afa:	400a      	ands	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;          //Mode Master
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <initSPI1+0x234>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <initSPI1+0x234>)
 8000b04:	2104      	movs	r1, #4
 8000b06:	430a      	orrs	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]

//	SPI1->CR2 |= SPI_CR2_SSOE;
	SPI1->CR2 &= ~SPI_CR2_FRF;			//SPI mode: 0 - Motorola, 1 - TI
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <initSPI1+0x234>)
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <initSPI1+0x234>)
 8000b10:	2110      	movs	r1, #16
 8000b12:	438a      	bics	r2, r1
 8000b14:	605a      	str	r2, [r3, #4]

	SPI1->CR1 |= SPI_CR1_SPE;           //Enable SPI1
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <initSPI1+0x234>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <initSPI1+0x234>)
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SPI1_IRQn);			//Interrupt enable
 8000b22:	2019      	movs	r0, #25
 8000b24:	f7ff fee6 	bl	80008f4 <NVIC_EnableIRQ>

	NSS_SET;
 8000b28:	23a0      	movs	r3, #160	; 0xa0
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2110      	movs	r1, #16
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000
 8000b44:	ffff00ff 	.word	0xffff00ff
 8000b48:	ff0fffff 	.word	0xff0fffff
 8000b4c:	ffffcfff 	.word	0xffffcfff
 8000b50:	f0ffffff 	.word	0xf0ffffff
 8000b54:	40013000 	.word	0x40013000
 8000b58:	ffff7fff 	.word	0xffff7fff
 8000b5c:	fffff7ff 	.word	0xfffff7ff
 8000b60:	ffffdfff 	.word	0xffffdfff

08000b64 <initUsart1>:
#include "libUART.h"
/*************************************************Define***********************************/

/**********************************************Use functions***********************************/
void initUsart1(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <initUsart1+0xb0>)
 8000b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <initUsart1+0xb0>)
 8000b6e:	2102      	movs	r1, #2
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <initUsart1+0xb0>)
 8000b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <initUsart1+0xb0>)
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	01c9      	lsls	r1, r1, #7
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34

	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7); //Alternate function for PB6 - USART1_TX and PB7 - USART1_RX
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <initUsart1+0xb4>)
 8000b84:	6a1a      	ldr	r2, [r3, #32]
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <initUsart1+0xb4>)
 8000b88:	0212      	lsls	r2, r2, #8
 8000b8a:	0a12      	lsrs	r2, r2, #8
 8000b8c:	621a      	str	r2, [r3, #32]

	//PB6 - USART1_TX
	GPIOB->MODER &= ~GPIO_MODER_MODE6_0; //Alternative function
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <initUsart1+0xb4>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <initUsart1+0xb4>)
 8000b94:	4921      	ldr	r1, [pc, #132]	; (8000c1c <initUsart1+0xb8>)
 8000b96:	400a      	ands	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_6; //Output push-pull
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <initUsart1+0xb4>)
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <initUsart1+0xb4>)
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	438a      	bics	r2, r1
 8000ba4:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEED6; //Very high speed
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <initUsart1+0xb4>)
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <initUsart1+0xb4>)
 8000bac:	21c0      	movs	r1, #192	; 0xc0
 8000bae:	0189      	lsls	r1, r1, #6
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	609a      	str	r2, [r3, #8]

	//PB7 - USART1_RX
	GPIOB->MODER &= ~GPIO_MODER_MODE7_0; //Alternative function
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <initUsart1+0xb4>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <initUsart1+0xb4>)
 8000bba:	4919      	ldr	r1, [pc, #100]	; (8000c20 <initUsart1+0xbc>)
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD7; //No pull-up, no pull down
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <initUsart1+0xb4>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <initUsart1+0xb4>)
 8000bc6:	4917      	ldr	r1, [pc, #92]	; (8000c24 <initUsart1+0xc0>)
 8000bc8:	400a      	ands	r2, r1
 8000bca:	60da      	str	r2, [r3, #12]

	//Usart settings
	USART1->CR1 &= ~USART_CR1_OVER8; //Oversampling by 16
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <initUsart1+0xc4>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <initUsart1+0xc4>)
 8000bd2:	4916      	ldr	r1, [pc, #88]	; (8000c2c <initUsart1+0xc8>)
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
	USART1->CR2 &= ~USART_CR2_STOP; //1 stop bit
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <initUsart1+0xc4>)
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <initUsart1+0xc4>)
 8000bde:	4914      	ldr	r1, [pc, #80]	; (8000c30 <initUsart1+0xcc>)
 8000be0:	400a      	ands	r2, r1
 8000be2:	605a      	str	r2, [r3, #4]

	USART1->BRR = 0xD05; //9.6 Kbit/s
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <initUsart1+0xc4>)
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <initUsart1+0xd0>)
 8000be8:	60da      	str	r2, [r3, #12]
//	USART1->BRR = 0x116; //115.2 Kbit/s
//	USART1->BRR = 0x10; //2Mbit/s

	USART1->CR1 |= USART_CR1_TE; //Transmit enable
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <initUsart1+0xc4>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <initUsart1+0xc4>)
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
	USART1->CR1 |= USART_CR1_RE; //Receive enable
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <initUsart1+0xc4>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <initUsart1+0xc4>)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
	USART1->CR1 |= USART_CR1_UE; //Usart enable
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <initUsart1+0xc4>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <initUsart1+0xc4>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	601a      	str	r2, [r3, #0]

	//USART1->CR1 |=USART_CR1_RXNEIE;
	//NVIC_EnableIRQ(USART1_IRQn);
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	50000400 	.word	0x50000400
 8000c1c:	ffffefff 	.word	0xffffefff
 8000c20:	ffffbfff 	.word	0xffffbfff
 8000c24:	ffff3fff 	.word	0xffff3fff
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	ffff7fff 	.word	0xffff7fff
 8000c30:	ffffcfff 	.word	0xffffcfff
 8000c34:	00000d05 	.word	0x00000d05

08000c38 <sendUsart1>:

void sendUsart1 (char *chr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	while(!(USART1->ISR & USART_ISR_TC));
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <sendUsart1+0x24>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d0fa      	beq.n	8000c42 <sendUsart1+0xa>
	USART1->TDR = *chr;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b02      	ldr	r3, [pc, #8]	; (8000c5c <sendUsart1+0x24>)
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40013800 	.word	0x40013800

08000c60 <sendStringUsart1>:

void sendStringUsart1 (char *str)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
	while(str[i])
 8000c70:	e00b      	b.n	8000c8a <sendStringUsart1+0x2a>
		sendUsart1(&str[i++]);
 8000c72:	220f      	movs	r2, #15
 8000c74:	18bb      	adds	r3, r7, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	18ba      	adds	r2, r7, r2
 8000c7a:	1c59      	adds	r1, r3, #1
 8000c7c:	7011      	strb	r1, [r2, #0]
 8000c7e:	001a      	movs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	189b      	adds	r3, r3, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffd7 	bl	8000c38 <sendUsart1>
	while(str[i])
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1eb      	bne.n	8000c72 <sendStringUsart1+0x12>
	sendUsart1(0);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff ffcc 	bl	8000c38 <sendUsart1>
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	4c49      	ldr	r4, [pc, #292]	; (8000dd0 <main+0x128>)
 8000cac:	44a5      	add	sp, r4
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t LTX_BUF[255]="4321";
 8000cb0:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <main+0x12c>)
 8000cb2:	22c4      	movs	r2, #196	; 0xc4
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	18ba      	adds	r2, r7, r2
 8000cb8:	18d1      	adds	r1, r2, r3
 8000cba:	4a47      	ldr	r2, [pc, #284]	; (8000dd8 <main+0x130>)
 8000cbc:	000b      	movs	r3, r1
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	6018      	str	r0, [r3, #0]
 8000cc2:	7912      	ldrb	r2, [r2, #4]
 8000cc4:	711a      	strb	r2, [r3, #4]
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	18cb      	adds	r3, r1, r3
 8000cca:	22fa      	movs	r2, #250	; 0xfa
 8000ccc:	2100      	movs	r1, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fa36 	bl	8001140 <memset>
	uint8_t LRX_BUF[255]={0};
 8000cd4:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <main+0x134>)
 8000cd6:	22c4      	movs	r2, #196	; 0xc4
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4694      	mov	ip, r2
 8000cdc:	44bc      	add	ip, r7
 8000cde:	4463      	add	r3, ip
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	23ff      	movs	r3, #255	; 0xff
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f000 fa2a 	bl	8001140 <memset>
	uint8_t LTX_BUF_SIZE = 4;
 8000cec:	4c3c      	ldr	r4, [pc, #240]	; (8000de0 <main+0x138>)
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	701a      	strb	r2, [r3, #0]
	uint8_t LRX_BUF_SIZE = 0;
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <main+0x13c>)
 8000cf6:	22c4      	movs	r2, #196	; 0xc4
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	44bc      	add	ip, r7
 8000cfe:	4463      	add	r3, ip
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

	uint8_t isReceived = 0;
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <main+0x140>)
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]

  /* Configure the system clock */


  /* USER CODE BEGIN SysInit */
	clockInit();
 8000d0c:	f000 f8d0 	bl	8000eb0 <clockInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	initSPI1();
 8000d10:	f7ff fe06 	bl	8000920 <initSPI1>
	SX1276Init();
 8000d14:	f7ff faaa 	bl	800026c <SX1276Init>
	SX1276_Init();
 8000d18:	f7ff fcde 	bl	80006d8 <SX1276_Init>
	initUsart1();
 8000d1c:	f7ff ff22 	bl	8000b64 <initUsart1>

	setRFSwitch(0);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f87f 	bl	8000e24 <setRFSwitch>
	Delay(0xFFFFF);
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <main+0x144>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fa8f 	bl	800024c <Delay>
	SX1276_SendTXBUF(LTX_BUF, LTX_BUF_SIZE);
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	2382      	movs	r3, #130	; 0x82
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fd6e 	bl	800081c <SX1276_SendTXBUF>
	SX1276_CleanBuffer();
 8000d40:	f7ff fdc6 	bl	80008d0 <SX1276_CleanBuffer>

	setRFSwitch(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 f86d 	bl	8000e24 <setRFSwitch>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
#if RECEIVER == 1
	  if(isDIO_0_Flag)
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <main+0x148>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0fb      	beq.n	8000d4a <main+0xa2>
	  {
		  isReceived = SX1276_ReadRXBUF(LRX_BUF, &LRX_BUF_SIZE);
 8000d52:	4d25      	ldr	r5, [pc, #148]	; (8000de8 <main+0x140>)
 8000d54:	197c      	adds	r4, r7, r5
 8000d56:	2308      	movs	r3, #8
 8000d58:	33ff      	adds	r3, #255	; 0xff
 8000d5a:	18fa      	adds	r2, r7, r3
 8000d5c:	2384      	movs	r3, #132	; 0x84
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fd09 	bl	800077c <SX1276_ReadRXBUF>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	7023      	strb	r3, [r4, #0]
		  if(isReceived)
 8000d6e:	197b      	adds	r3, r7, r5
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d027      	beq.n	8000dc6 <main+0x11e>
		  {
			  int RSSI = -164 + rssi; //+ (snr >> 2);
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <main+0x14c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3ba4      	subs	r3, #164	; 0xa4
 8000d7c:	24c2      	movs	r4, #194	; 0xc2
 8000d7e:	00a4      	lsls	r4, r4, #2
 8000d80:	193a      	adds	r2, r7, r4
 8000d82:	6013      	str	r3, [r2, #0]
			  setRFSwitch(0);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f84d 	bl	8000e24 <setRFSwitch>
			  SX1276_SendTXBUF(LTX_BUF, LTX_BUF_SIZE);
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <main+0x138>)
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	2582      	movs	r5, #130	; 0x82
 8000d92:	00ad      	lsls	r5, r5, #2
 8000d94:	197b      	adds	r3, r7, r5
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fd3f 	bl	800081c <SX1276_SendTXBUF>
			  SX1276_CleanBuffer();
 8000d9e:	f7ff fd97 	bl	80008d0 <SX1276_CleanBuffer>
			  isReceived = 0;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <main+0x140>)
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
			  setRFSwitch(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f000 f83a 	bl	8000e24 <setRFSwitch>
			  sprintf(strCheck,"\nMessage: %s, RSSI: %d", LTX_BUF, RSSI);
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	197a      	adds	r2, r7, r5
 8000db6:	4910      	ldr	r1, [pc, #64]	; (8000df8 <main+0x150>)
 8000db8:	1d38      	adds	r0, r7, #4
 8000dba:	f000 f9c9 	bl	8001150 <siprintf>
			  sendStringUsart1(strCheck);
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ff4d 	bl	8000c60 <sendStringUsart1>
		  }
		  isDIO_0_Flag = 0;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <main+0x148>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	  if(isDIO_0_Flag)
 8000dcc:	e7bd      	b.n	8000d4a <main+0xa2>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	fffffcf0 	.word	0xfffffcf0
 8000dd4:	fffffef8 	.word	0xfffffef8
 8000dd8:	08001990 	.word	0x08001990
 8000ddc:	fffffdf8 	.word	0xfffffdf8
 8000de0:	0000030f 	.word	0x0000030f
 8000de4:	fffffdf7 	.word	0xfffffdf7
 8000de8:	0000030e 	.word	0x0000030e
 8000dec:	000fffff 	.word	0x000fffff
 8000df0:	20000080 	.word	0x20000080
 8000df4:	200000a7 	.word	0x200000a7
 8000df8:	08001978 	.word	0x08001978

08000dfc <EXTI4_15_IRQHandler>:
}

/* USER CODE BEGIN 4 */

//interrupt from DIO0 SX1276 on PB10
void EXTI4_15_IRQHandler(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

	isDIO_0_Flag = 1;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <EXTI4_15_IRQHandler+0x20>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
	EXTI->PR |= EXTI_PR_PR10;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <EXTI4_15_IRQHandler+0x24>)
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <EXTI4_15_IRQHandler+0x24>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	00c9      	lsls	r1, r1, #3
 8000e10:	430a      	orrs	r2, r1
 8000e12:	615a      	str	r2, [r3, #20]

}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000080 	.word	0x20000080
 8000e20:	40010400 	.word	0x40010400

08000e24 <setRFSwitch>:


void setRFSwitch(uint8_t isReceiver){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	701a      	strb	r2, [r3, #0]

	if(isReceiver)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d010      	beq.n	8000e5a <setRFSwitch+0x36>
	{
		GPIOA->ODR |= GPIO_ODR_OD1;
 8000e38:	23a0      	movs	r3, #160	; 0xa0
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	23a0      	movs	r3, #160	; 0xa0
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	2102      	movs	r1, #2
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= GPIO_ODR_OD2;
 8000e48:	23a0      	movs	r3, #160	; 0xa0
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	23a0      	movs	r3, #160	; 0xa0
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2104      	movs	r1, #4
 8000e54:	430a      	orrs	r2, r1
 8000e56:	615a      	str	r2, [r3, #20]
	else
	{
		GPIOA->ODR &= ~GPIO_ODR_OD1;
		GPIOA->ODR &= ~GPIO_ODR_OD2;
	}
}
 8000e58:	e00f      	b.n	8000e7a <setRFSwitch+0x56>
		GPIOA->ODR &= ~GPIO_ODR_OD1;
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	23a0      	movs	r3, #160	; 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	2102      	movs	r1, #2
 8000e66:	438a      	bics	r2, r1
 8000e68:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~GPIO_ODR_OD2;
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2104      	movs	r1, #4
 8000e76:	438a      	bics	r2, r1
 8000e78:	615a      	str	r2, [r3, #20]
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <HardFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <clockInit>:

/*************************************************Variables***********************************/

/**********************************************Use functions***********************************/
int clockInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	RCC->CIER |= RCC_CIER_HSERDYIE; // HSE ready interrupt enabled
 8000eb4:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <clockInit+0x104>)
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <clockInit+0x104>)
 8000eba:	2108      	movs	r1, #8
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	611a      	str	r2, [r3, #16]
	RCC->CIER |= RCC_CIER_PLLRDYIE; //PLL lock interrupt enabled
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <clockInit+0x104>)
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <clockInit+0x104>)
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	611a      	str	r2, [r3, #16]
	RCC->CR |= RCC_CR_CSSHSEON | RCC_CR_HSEON; // set HSE calibration check and enable HSE clock
 8000ecc:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <clockInit+0x104>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <clockInit+0x104>)
 8000ed2:	2190      	movs	r1, #144	; 0x90
 8000ed4:	0309      	lsls	r1, r1, #12
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
	while((RCC->CIER & RCC_CIFR_HSERDYF) == 0); //Wait until HSERDYF is set
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <clockInit+0x104>)
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d0fa      	beq.n	8000edc <clockInit+0x2c>

	RCC->CICR |= RCC_CICR_HSERDYC; //Clear the flag HSE ready
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <clockInit+0x104>)
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <clockInit+0x104>)
 8000eec:	2108      	movs	r1, #8
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	619a      	str	r2, [r3, #24]

	RCC->CR &= ~RCC_CR_PLLON; //Disable the PLL
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <clockInit+0x104>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <clockInit+0x104>)
 8000ef8:	492f      	ldr	r1, [pc, #188]	; (8000fb8 <clockInit+0x108>)
 8000efa:	400a      	ands	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
	while((RCC->CR & RCC_CR_PLLRDY) != 0); //Wait until PLLRDY is cleared
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <clockInit+0x104>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	049b      	lsls	r3, r3, #18
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d1f9      	bne.n	8000f00 <clockInit+0x50>

	FLASH->ACR |= FLASH_ACR_LATENCY; //Set latency to 1 wait state
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <clockInit+0x10c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <clockInit+0x10c>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]

	//---------Set 32 MHz by 12 MHz HSE --------------//
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE; //HSE is input clock for PLL
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <clockInit+0x104>)
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <clockInit+0x104>)
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	430a      	orrs	r2, r1
 8000f24:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PLLMUL8; //HSE * 8 = PLL
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <clockInit+0x104>)
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <clockInit+0x104>)
 8000f2c:	21c0      	movs	r1, #192	; 0xc0
 8000f2e:	0309      	lsls	r1, r1, #12
 8000f30:	430a      	orrs	r2, r1
 8000f32:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PLLDIV3; //PLL / 3
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <clockInit+0x104>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <clockInit+0x104>)
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	0409      	lsls	r1, r1, #16
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	60da      	str	r2, [r3, #12]
	//------------------------------------------------//

	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; //AHB = PLL / 1
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <clockInit+0x104>)
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <clockInit+0x104>)
 8000f46:	68d2      	ldr	r2, [r2, #12]
 8000f48:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; //APB2 = AHB / 1
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <clockInit+0x104>)
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <clockInit+0x104>)
 8000f4e:	68d2      	ldr	r2, [r2, #12]
 8000f50:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; //APB1 = AHB / 1
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <clockInit+0x104>)
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <clockInit+0x104>)
 8000f56:	68d2      	ldr	r2, [r2, #12]
 8000f58:	60da      	str	r2, [r3, #12]

	RCC->CR |= RCC_CR_PLLON; //Enable the PLL
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <clockInit+0x104>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <clockInit+0x104>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0449      	lsls	r1, r1, #17
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_PLLRDY) == 0); //Wait until PLLRDY is set
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <clockInit+0x104>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	049b      	lsls	r3, r3, #18
 8000f72:	4013      	ands	r3, r2
 8000f74:	d0f9      	beq.n	8000f6a <clockInit+0xba>

	RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL as system clock
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <clockInit+0x104>)
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <clockInit+0x104>)
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	60da      	str	r2, [r3, #12]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); //Wait until the PLL is switched on
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <clockInit+0x104>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b0c      	cmp	r3, #12
 8000f8e:	d1f9      	bne.n	8000f84 <clockInit+0xd4>

	RCC->CR &= ~RCC_CR_MSION; //Disable the PLL
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <clockInit+0x104>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <clockInit+0x104>)
 8000f96:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <clockInit+0x110>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
	while((RCC->CR & RCC_CR_MSIRDY) != 0); //Wait until PLLRDY is cleared
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <clockInit+0x104>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d1f9      	bne.n	8000f9e <clockInit+0xee>

	return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	feffffff 	.word	0xfeffffff
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	fffffeff 	.word	0xfffffeff

08000fc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x50>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x16>
		heap_end = &end;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <_sbrk+0x50>)
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <_sbrk+0x54>)
 8000fd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <_sbrk+0x50>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <_sbrk+0x50>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	466a      	mov	r2, sp
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d907      	bls.n	8000ffe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fee:	f000 f87d 	bl	80010ec <__errno>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	e006      	b.n	800100c <_sbrk+0x48>
	}

	heap_end += incr;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <_sbrk+0x50>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	18d2      	adds	r2, r2, r3
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <_sbrk+0x50>)
 8001008:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000084 	.word	0x20000084
 8001018:	200000b0 	.word	0x200000b0

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <SystemInit+0x64>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <SystemInit+0x64>)
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	0049      	lsls	r1, r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <SystemInit+0x64>)
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <SystemInit+0x64>)
 8001034:	4913      	ldr	r1, [pc, #76]	; (8001084 <SystemInit+0x68>)
 8001036:	400a      	ands	r2, r1
 8001038:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <SystemInit+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <SystemInit+0x64>)
 8001040:	4911      	ldr	r1, [pc, #68]	; (8001088 <SystemInit+0x6c>)
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <SystemInit+0x64>)
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <SystemInit+0x64>)
 800104c:	2101      	movs	r1, #1
 800104e:	438a      	bics	r2, r1
 8001050:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <SystemInit+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <SystemInit+0x64>)
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <SystemInit+0x70>)
 800105a:	400a      	ands	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <SystemInit+0x64>)
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <SystemInit+0x64>)
 8001064:	490a      	ldr	r1, [pc, #40]	; (8001090 <SystemInit+0x74>)
 8001066:	400a      	ands	r2, r1
 8001068:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SystemInit+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SystemInit+0x78>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	0512      	lsls	r2, r2, #20
 8001076:	609a      	str	r2, [r3, #8]
#endif
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40021000 	.word	0x40021000
 8001084:	88ff400c 	.word	0x88ff400c
 8001088:	fef6fff6 	.word	0xfef6fff6
 800108c:	fffbffff 	.word	0xfffbffff
 8001090:	ff02ffff 	.word	0xff02ffff
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800109a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800109c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopForever+0xe>)
  adds  r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
  ldr  r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80010b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80010b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ba:	3204      	adds	r2, #4

080010bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <LoopForever+0x16>)
  cmp  r2, r3
 80010be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010c2:	f7ff ffab 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f000 f817 	bl	80010f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fded 	bl	8000ca8 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
   ldr   r0, =_estack
 80010d0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80010d4:	08001ae0 	.word	0x08001ae0
  ldr  r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010dc:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 80010e0:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 80010e4:	200000b0 	.word	0x200000b0

080010e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_COMP_IRQHandler>
	...

080010ec <__errno>:
 80010ec:	4b01      	ldr	r3, [pc, #4]	; (80010f4 <__errno+0x8>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	4770      	bx	lr
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	20000000 	.word	0x20000000

080010f8 <__libc_init_array>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	2600      	movs	r6, #0
 80010fc:	4d0c      	ldr	r5, [pc, #48]	; (8001130 <__libc_init_array+0x38>)
 80010fe:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__libc_init_array+0x3c>)
 8001100:	1b64      	subs	r4, r4, r5
 8001102:	10a4      	asrs	r4, r4, #2
 8001104:	42a6      	cmp	r6, r4
 8001106:	d109      	bne.n	800111c <__libc_init_array+0x24>
 8001108:	2600      	movs	r6, #0
 800110a:	f000 fc29 	bl	8001960 <_init>
 800110e:	4d0a      	ldr	r5, [pc, #40]	; (8001138 <__libc_init_array+0x40>)
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <__libc_init_array+0x44>)
 8001112:	1b64      	subs	r4, r4, r5
 8001114:	10a4      	asrs	r4, r4, #2
 8001116:	42a6      	cmp	r6, r4
 8001118:	d105      	bne.n	8001126 <__libc_init_array+0x2e>
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	00b3      	lsls	r3, r6, #2
 800111e:	58eb      	ldr	r3, [r5, r3]
 8001120:	4798      	blx	r3
 8001122:	3601      	adds	r6, #1
 8001124:	e7ee      	b.n	8001104 <__libc_init_array+0xc>
 8001126:	00b3      	lsls	r3, r6, #2
 8001128:	58eb      	ldr	r3, [r5, r3]
 800112a:	4798      	blx	r3
 800112c:	3601      	adds	r6, #1
 800112e:	e7f2      	b.n	8001116 <__libc_init_array+0x1e>
 8001130:	08001ad8 	.word	0x08001ad8
 8001134:	08001ad8 	.word	0x08001ad8
 8001138:	08001ad8 	.word	0x08001ad8
 800113c:	08001adc 	.word	0x08001adc

08001140 <memset>:
 8001140:	0003      	movs	r3, r0
 8001142:	1812      	adds	r2, r2, r0
 8001144:	4293      	cmp	r3, r2
 8001146:	d100      	bne.n	800114a <memset+0xa>
 8001148:	4770      	bx	lr
 800114a:	7019      	strb	r1, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	e7f9      	b.n	8001144 <memset+0x4>

08001150 <siprintf>:
 8001150:	b40e      	push	{r1, r2, r3}
 8001152:	b500      	push	{lr}
 8001154:	490b      	ldr	r1, [pc, #44]	; (8001184 <siprintf+0x34>)
 8001156:	b09c      	sub	sp, #112	; 0x70
 8001158:	ab1d      	add	r3, sp, #116	; 0x74
 800115a:	9002      	str	r0, [sp, #8]
 800115c:	9006      	str	r0, [sp, #24]
 800115e:	9107      	str	r1, [sp, #28]
 8001160:	9104      	str	r1, [sp, #16]
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <siprintf+0x38>)
 8001164:	4909      	ldr	r1, [pc, #36]	; (800118c <siprintf+0x3c>)
 8001166:	cb04      	ldmia	r3!, {r2}
 8001168:	9105      	str	r1, [sp, #20]
 800116a:	6800      	ldr	r0, [r0, #0]
 800116c:	a902      	add	r1, sp, #8
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	f000 f870 	bl	8001254 <_svfiprintf_r>
 8001174:	2300      	movs	r3, #0
 8001176:	9a02      	ldr	r2, [sp, #8]
 8001178:	7013      	strb	r3, [r2, #0]
 800117a:	b01c      	add	sp, #112	; 0x70
 800117c:	bc08      	pop	{r3}
 800117e:	b003      	add	sp, #12
 8001180:	4718      	bx	r3
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	7fffffff 	.word	0x7fffffff
 8001188:	20000000 	.word	0x20000000
 800118c:	ffff0208 	.word	0xffff0208

08001190 <__ssputs_r>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	688e      	ldr	r6, [r1, #8]
 8001194:	b085      	sub	sp, #20
 8001196:	0007      	movs	r7, r0
 8001198:	000c      	movs	r4, r1
 800119a:	9203      	str	r2, [sp, #12]
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	429e      	cmp	r6, r3
 80011a0:	d83c      	bhi.n	800121c <__ssputs_r+0x8c>
 80011a2:	2390      	movs	r3, #144	; 0x90
 80011a4:	898a      	ldrh	r2, [r1, #12]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	421a      	tst	r2, r3
 80011aa:	d034      	beq.n	8001216 <__ssputs_r+0x86>
 80011ac:	2503      	movs	r5, #3
 80011ae:	6909      	ldr	r1, [r1, #16]
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	1a5b      	subs	r3, r3, r1
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	6963      	ldr	r3, [r4, #20]
 80011b8:	9802      	ldr	r0, [sp, #8]
 80011ba:	435d      	muls	r5, r3
 80011bc:	0feb      	lsrs	r3, r5, #31
 80011be:	195d      	adds	r5, r3, r5
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	106d      	asrs	r5, r5, #1
 80011c4:	3301      	adds	r3, #1
 80011c6:	181b      	adds	r3, r3, r0
 80011c8:	42ab      	cmp	r3, r5
 80011ca:	d900      	bls.n	80011ce <__ssputs_r+0x3e>
 80011cc:	001d      	movs	r5, r3
 80011ce:	0553      	lsls	r3, r2, #21
 80011d0:	d532      	bpl.n	8001238 <__ssputs_r+0xa8>
 80011d2:	0029      	movs	r1, r5
 80011d4:	0038      	movs	r0, r7
 80011d6:	f000 fb23 	bl	8001820 <_malloc_r>
 80011da:	1e06      	subs	r6, r0, #0
 80011dc:	d109      	bne.n	80011f2 <__ssputs_r+0x62>
 80011de:	230c      	movs	r3, #12
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	2340      	movs	r3, #64	; 0x40
 80011e4:	2001      	movs	r0, #1
 80011e6:	89a2      	ldrh	r2, [r4, #12]
 80011e8:	4240      	negs	r0, r0
 80011ea:	4313      	orrs	r3, r2
 80011ec:	81a3      	strh	r3, [r4, #12]
 80011ee:	b005      	add	sp, #20
 80011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f2:	9a02      	ldr	r2, [sp, #8]
 80011f4:	6921      	ldr	r1, [r4, #16]
 80011f6:	f000 faac 	bl	8001752 <memcpy>
 80011fa:	89a3      	ldrh	r3, [r4, #12]
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <__ssputs_r+0xc0>)
 80011fe:	401a      	ands	r2, r3
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	4313      	orrs	r3, r2
 8001204:	81a3      	strh	r3, [r4, #12]
 8001206:	9b02      	ldr	r3, [sp, #8]
 8001208:	6126      	str	r6, [r4, #16]
 800120a:	18f6      	adds	r6, r6, r3
 800120c:	6026      	str	r6, [r4, #0]
 800120e:	6165      	str	r5, [r4, #20]
 8001210:	9e01      	ldr	r6, [sp, #4]
 8001212:	1aed      	subs	r5, r5, r3
 8001214:	60a5      	str	r5, [r4, #8]
 8001216:	9b01      	ldr	r3, [sp, #4]
 8001218:	429e      	cmp	r6, r3
 800121a:	d900      	bls.n	800121e <__ssputs_r+0x8e>
 800121c:	9e01      	ldr	r6, [sp, #4]
 800121e:	0032      	movs	r2, r6
 8001220:	9903      	ldr	r1, [sp, #12]
 8001222:	6820      	ldr	r0, [r4, #0]
 8001224:	f000 fa9e 	bl	8001764 <memmove>
 8001228:	68a3      	ldr	r3, [r4, #8]
 800122a:	2000      	movs	r0, #0
 800122c:	1b9b      	subs	r3, r3, r6
 800122e:	60a3      	str	r3, [r4, #8]
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	199e      	adds	r6, r3, r6
 8001234:	6026      	str	r6, [r4, #0]
 8001236:	e7da      	b.n	80011ee <__ssputs_r+0x5e>
 8001238:	002a      	movs	r2, r5
 800123a:	0038      	movs	r0, r7
 800123c:	f000 fb4e 	bl	80018dc <_realloc_r>
 8001240:	1e06      	subs	r6, r0, #0
 8001242:	d1e0      	bne.n	8001206 <__ssputs_r+0x76>
 8001244:	6921      	ldr	r1, [r4, #16]
 8001246:	0038      	movs	r0, r7
 8001248:	f000 faa0 	bl	800178c <_free_r>
 800124c:	e7c7      	b.n	80011de <__ssputs_r+0x4e>
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	fffffb7f 	.word	0xfffffb7f

08001254 <_svfiprintf_r>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	b0a1      	sub	sp, #132	; 0x84
 8001258:	9003      	str	r0, [sp, #12]
 800125a:	001d      	movs	r5, r3
 800125c:	898b      	ldrh	r3, [r1, #12]
 800125e:	000f      	movs	r7, r1
 8001260:	0016      	movs	r6, r2
 8001262:	061b      	lsls	r3, r3, #24
 8001264:	d511      	bpl.n	800128a <_svfiprintf_r+0x36>
 8001266:	690b      	ldr	r3, [r1, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10e      	bne.n	800128a <_svfiprintf_r+0x36>
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	f000 fad7 	bl	8001820 <_malloc_r>
 8001272:	6038      	str	r0, [r7, #0]
 8001274:	6138      	str	r0, [r7, #16]
 8001276:	2800      	cmp	r0, #0
 8001278:	d105      	bne.n	8001286 <_svfiprintf_r+0x32>
 800127a:	230c      	movs	r3, #12
 800127c:	9a03      	ldr	r2, [sp, #12]
 800127e:	3801      	subs	r0, #1
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	b021      	add	sp, #132	; 0x84
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	2340      	movs	r3, #64	; 0x40
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	2300      	movs	r3, #0
 800128c:	ac08      	add	r4, sp, #32
 800128e:	6163      	str	r3, [r4, #20]
 8001290:	3320      	adds	r3, #32
 8001292:	7663      	strb	r3, [r4, #25]
 8001294:	3310      	adds	r3, #16
 8001296:	76a3      	strb	r3, [r4, #26]
 8001298:	9507      	str	r5, [sp, #28]
 800129a:	0035      	movs	r5, r6
 800129c:	782b      	ldrb	r3, [r5, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <_svfiprintf_r+0x52>
 80012a2:	2b25      	cmp	r3, #37	; 0x25
 80012a4:	d146      	bne.n	8001334 <_svfiprintf_r+0xe0>
 80012a6:	1bab      	subs	r3, r5, r6
 80012a8:	9305      	str	r3, [sp, #20]
 80012aa:	d00c      	beq.n	80012c6 <_svfiprintf_r+0x72>
 80012ac:	0032      	movs	r2, r6
 80012ae:	0039      	movs	r1, r7
 80012b0:	9803      	ldr	r0, [sp, #12]
 80012b2:	f7ff ff6d 	bl	8001190 <__ssputs_r>
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	d100      	bne.n	80012bc <_svfiprintf_r+0x68>
 80012ba:	e0ae      	b.n	800141a <_svfiprintf_r+0x1c6>
 80012bc:	6962      	ldr	r2, [r4, #20]
 80012be:	9b05      	ldr	r3, [sp, #20]
 80012c0:	4694      	mov	ip, r2
 80012c2:	4463      	add	r3, ip
 80012c4:	6163      	str	r3, [r4, #20]
 80012c6:	782b      	ldrb	r3, [r5, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <_svfiprintf_r+0x7a>
 80012cc:	e0a5      	b.n	800141a <_svfiprintf_r+0x1c6>
 80012ce:	2201      	movs	r2, #1
 80012d0:	2300      	movs	r3, #0
 80012d2:	4252      	negs	r2, r2
 80012d4:	6062      	str	r2, [r4, #4]
 80012d6:	a904      	add	r1, sp, #16
 80012d8:	3254      	adds	r2, #84	; 0x54
 80012da:	1852      	adds	r2, r2, r1
 80012dc:	1c6e      	adds	r6, r5, #1
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	60e3      	str	r3, [r4, #12]
 80012e2:	60a3      	str	r3, [r4, #8]
 80012e4:	7013      	strb	r3, [r2, #0]
 80012e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80012e8:	7831      	ldrb	r1, [r6, #0]
 80012ea:	2205      	movs	r2, #5
 80012ec:	4853      	ldr	r0, [pc, #332]	; (800143c <_svfiprintf_r+0x1e8>)
 80012ee:	f000 fa25 	bl	800173c <memchr>
 80012f2:	1c75      	adds	r5, r6, #1
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d11f      	bne.n	8001338 <_svfiprintf_r+0xe4>
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	06d3      	lsls	r3, r2, #27
 80012fc:	d504      	bpl.n	8001308 <_svfiprintf_r+0xb4>
 80012fe:	2353      	movs	r3, #83	; 0x53
 8001300:	a904      	add	r1, sp, #16
 8001302:	185b      	adds	r3, r3, r1
 8001304:	2120      	movs	r1, #32
 8001306:	7019      	strb	r1, [r3, #0]
 8001308:	0713      	lsls	r3, r2, #28
 800130a:	d504      	bpl.n	8001316 <_svfiprintf_r+0xc2>
 800130c:	2353      	movs	r3, #83	; 0x53
 800130e:	a904      	add	r1, sp, #16
 8001310:	185b      	adds	r3, r3, r1
 8001312:	212b      	movs	r1, #43	; 0x2b
 8001314:	7019      	strb	r1, [r3, #0]
 8001316:	7833      	ldrb	r3, [r6, #0]
 8001318:	2b2a      	cmp	r3, #42	; 0x2a
 800131a:	d016      	beq.n	800134a <_svfiprintf_r+0xf6>
 800131c:	0035      	movs	r5, r6
 800131e:	2100      	movs	r1, #0
 8001320:	200a      	movs	r0, #10
 8001322:	68e3      	ldr	r3, [r4, #12]
 8001324:	782a      	ldrb	r2, [r5, #0]
 8001326:	1c6e      	adds	r6, r5, #1
 8001328:	3a30      	subs	r2, #48	; 0x30
 800132a:	2a09      	cmp	r2, #9
 800132c:	d94e      	bls.n	80013cc <_svfiprintf_r+0x178>
 800132e:	2900      	cmp	r1, #0
 8001330:	d018      	beq.n	8001364 <_svfiprintf_r+0x110>
 8001332:	e010      	b.n	8001356 <_svfiprintf_r+0x102>
 8001334:	3501      	adds	r5, #1
 8001336:	e7b1      	b.n	800129c <_svfiprintf_r+0x48>
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <_svfiprintf_r+0x1e8>)
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	1ac0      	subs	r0, r0, r3
 800133e:	2301      	movs	r3, #1
 8001340:	4083      	lsls	r3, r0
 8001342:	4313      	orrs	r3, r2
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	002e      	movs	r6, r5
 8001348:	e7ce      	b.n	80012e8 <_svfiprintf_r+0x94>
 800134a:	9b07      	ldr	r3, [sp, #28]
 800134c:	1d19      	adds	r1, r3, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	9107      	str	r1, [sp, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db01      	blt.n	800135a <_svfiprintf_r+0x106>
 8001356:	930b      	str	r3, [sp, #44]	; 0x2c
 8001358:	e004      	b.n	8001364 <_svfiprintf_r+0x110>
 800135a:	425b      	negs	r3, r3
 800135c:	60e3      	str	r3, [r4, #12]
 800135e:	2302      	movs	r3, #2
 8001360:	4313      	orrs	r3, r2
 8001362:	6023      	str	r3, [r4, #0]
 8001364:	782b      	ldrb	r3, [r5, #0]
 8001366:	2b2e      	cmp	r3, #46	; 0x2e
 8001368:	d10a      	bne.n	8001380 <_svfiprintf_r+0x12c>
 800136a:	786b      	ldrb	r3, [r5, #1]
 800136c:	2b2a      	cmp	r3, #42	; 0x2a
 800136e:	d135      	bne.n	80013dc <_svfiprintf_r+0x188>
 8001370:	9b07      	ldr	r3, [sp, #28]
 8001372:	3502      	adds	r5, #2
 8001374:	1d1a      	adds	r2, r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	9207      	str	r2, [sp, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db2b      	blt.n	80013d6 <_svfiprintf_r+0x182>
 800137e:	9309      	str	r3, [sp, #36]	; 0x24
 8001380:	4e2f      	ldr	r6, [pc, #188]	; (8001440 <_svfiprintf_r+0x1ec>)
 8001382:	7829      	ldrb	r1, [r5, #0]
 8001384:	2203      	movs	r2, #3
 8001386:	0030      	movs	r0, r6
 8001388:	f000 f9d8 	bl	800173c <memchr>
 800138c:	2800      	cmp	r0, #0
 800138e:	d006      	beq.n	800139e <_svfiprintf_r+0x14a>
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	1b80      	subs	r0, r0, r6
 8001394:	4083      	lsls	r3, r0
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	3501      	adds	r5, #1
 800139a:	4313      	orrs	r3, r2
 800139c:	6023      	str	r3, [r4, #0]
 800139e:	7829      	ldrb	r1, [r5, #0]
 80013a0:	2206      	movs	r2, #6
 80013a2:	4828      	ldr	r0, [pc, #160]	; (8001444 <_svfiprintf_r+0x1f0>)
 80013a4:	1c6e      	adds	r6, r5, #1
 80013a6:	7621      	strb	r1, [r4, #24]
 80013a8:	f000 f9c8 	bl	800173c <memchr>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d03c      	beq.n	800142a <_svfiprintf_r+0x1d6>
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <_svfiprintf_r+0x1f4>)
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d125      	bne.n	8001402 <_svfiprintf_r+0x1ae>
 80013b6:	2207      	movs	r2, #7
 80013b8:	9b07      	ldr	r3, [sp, #28]
 80013ba:	3307      	adds	r3, #7
 80013bc:	4393      	bics	r3, r2
 80013be:	3308      	adds	r3, #8
 80013c0:	9307      	str	r3, [sp, #28]
 80013c2:	6963      	ldr	r3, [r4, #20]
 80013c4:	9a04      	ldr	r2, [sp, #16]
 80013c6:	189b      	adds	r3, r3, r2
 80013c8:	6163      	str	r3, [r4, #20]
 80013ca:	e766      	b.n	800129a <_svfiprintf_r+0x46>
 80013cc:	4343      	muls	r3, r0
 80013ce:	2101      	movs	r1, #1
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	0035      	movs	r5, r6
 80013d4:	e7a6      	b.n	8001324 <_svfiprintf_r+0xd0>
 80013d6:	2301      	movs	r3, #1
 80013d8:	425b      	negs	r3, r3
 80013da:	e7d0      	b.n	800137e <_svfiprintf_r+0x12a>
 80013dc:	2300      	movs	r3, #0
 80013de:	200a      	movs	r0, #10
 80013e0:	001a      	movs	r2, r3
 80013e2:	3501      	adds	r5, #1
 80013e4:	6063      	str	r3, [r4, #4]
 80013e6:	7829      	ldrb	r1, [r5, #0]
 80013e8:	1c6e      	adds	r6, r5, #1
 80013ea:	3930      	subs	r1, #48	; 0x30
 80013ec:	2909      	cmp	r1, #9
 80013ee:	d903      	bls.n	80013f8 <_svfiprintf_r+0x1a4>
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0c5      	beq.n	8001380 <_svfiprintf_r+0x12c>
 80013f4:	9209      	str	r2, [sp, #36]	; 0x24
 80013f6:	e7c3      	b.n	8001380 <_svfiprintf_r+0x12c>
 80013f8:	4342      	muls	r2, r0
 80013fa:	2301      	movs	r3, #1
 80013fc:	1852      	adds	r2, r2, r1
 80013fe:	0035      	movs	r5, r6
 8001400:	e7f1      	b.n	80013e6 <_svfiprintf_r+0x192>
 8001402:	ab07      	add	r3, sp, #28
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	003a      	movs	r2, r7
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <_svfiprintf_r+0x1f8>)
 800140a:	0021      	movs	r1, r4
 800140c:	9803      	ldr	r0, [sp, #12]
 800140e:	e000      	b.n	8001412 <_svfiprintf_r+0x1be>
 8001410:	bf00      	nop
 8001412:	9004      	str	r0, [sp, #16]
 8001414:	9b04      	ldr	r3, [sp, #16]
 8001416:	3301      	adds	r3, #1
 8001418:	d1d3      	bne.n	80013c2 <_svfiprintf_r+0x16e>
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800141e:	065b      	lsls	r3, r3, #25
 8001420:	d400      	bmi.n	8001424 <_svfiprintf_r+0x1d0>
 8001422:	e72e      	b.n	8001282 <_svfiprintf_r+0x2e>
 8001424:	2001      	movs	r0, #1
 8001426:	4240      	negs	r0, r0
 8001428:	e72b      	b.n	8001282 <_svfiprintf_r+0x2e>
 800142a:	ab07      	add	r3, sp, #28
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	003a      	movs	r2, r7
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <_svfiprintf_r+0x1f8>)
 8001432:	0021      	movs	r1, r4
 8001434:	9803      	ldr	r0, [sp, #12]
 8001436:	f000 f879 	bl	800152c <_printf_i>
 800143a:	e7ea      	b.n	8001412 <_svfiprintf_r+0x1be>
 800143c:	08001aa4 	.word	0x08001aa4
 8001440:	08001aaa 	.word	0x08001aaa
 8001444:	08001aae 	.word	0x08001aae
 8001448:	00000000 	.word	0x00000000
 800144c:	08001191 	.word	0x08001191

08001450 <_printf_common>:
 8001450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001452:	0015      	movs	r5, r2
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	688a      	ldr	r2, [r1, #8]
 8001458:	690b      	ldr	r3, [r1, #16]
 800145a:	9000      	str	r0, [sp, #0]
 800145c:	000c      	movs	r4, r1
 800145e:	4293      	cmp	r3, r2
 8001460:	da00      	bge.n	8001464 <_printf_common+0x14>
 8001462:	0013      	movs	r3, r2
 8001464:	0022      	movs	r2, r4
 8001466:	602b      	str	r3, [r5, #0]
 8001468:	3243      	adds	r2, #67	; 0x43
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	2a00      	cmp	r2, #0
 800146e:	d001      	beq.n	8001474 <_printf_common+0x24>
 8001470:	3301      	adds	r3, #1
 8001472:	602b      	str	r3, [r5, #0]
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	069b      	lsls	r3, r3, #26
 8001478:	d502      	bpl.n	8001480 <_printf_common+0x30>
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	3302      	adds	r3, #2
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	2706      	movs	r7, #6
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	401f      	ands	r7, r3
 8001486:	d027      	beq.n	80014d8 <_printf_common+0x88>
 8001488:	0023      	movs	r3, r4
 800148a:	3343      	adds	r3, #67	; 0x43
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	4193      	sbcs	r3, r2
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	0692      	lsls	r2, r2, #26
 8001496:	d430      	bmi.n	80014fa <_printf_common+0xaa>
 8001498:	0022      	movs	r2, r4
 800149a:	9901      	ldr	r1, [sp, #4]
 800149c:	3243      	adds	r2, #67	; 0x43
 800149e:	9800      	ldr	r0, [sp, #0]
 80014a0:	9e08      	ldr	r6, [sp, #32]
 80014a2:	47b0      	blx	r6
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d025      	beq.n	80014f4 <_printf_common+0xa4>
 80014a8:	2306      	movs	r3, #6
 80014aa:	6820      	ldr	r0, [r4, #0]
 80014ac:	682a      	ldr	r2, [r5, #0]
 80014ae:	68e1      	ldr	r1, [r4, #12]
 80014b0:	4003      	ands	r3, r0
 80014b2:	2500      	movs	r5, #0
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d103      	bne.n	80014c0 <_printf_common+0x70>
 80014b8:	1a8d      	subs	r5, r1, r2
 80014ba:	43eb      	mvns	r3, r5
 80014bc:	17db      	asrs	r3, r3, #31
 80014be:	401d      	ands	r5, r3
 80014c0:	68a3      	ldr	r3, [r4, #8]
 80014c2:	6922      	ldr	r2, [r4, #16]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	dd01      	ble.n	80014cc <_printf_common+0x7c>
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	18ed      	adds	r5, r5, r3
 80014cc:	2700      	movs	r7, #0
 80014ce:	42bd      	cmp	r5, r7
 80014d0:	d120      	bne.n	8001514 <_printf_common+0xc4>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e010      	b.n	80014f8 <_printf_common+0xa8>
 80014d6:	3701      	adds	r7, #1
 80014d8:	68e3      	ldr	r3, [r4, #12]
 80014da:	682a      	ldr	r2, [r5, #0]
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	42bb      	cmp	r3, r7
 80014e0:	ddd2      	ble.n	8001488 <_printf_common+0x38>
 80014e2:	0022      	movs	r2, r4
 80014e4:	2301      	movs	r3, #1
 80014e6:	3219      	adds	r2, #25
 80014e8:	9901      	ldr	r1, [sp, #4]
 80014ea:	9800      	ldr	r0, [sp, #0]
 80014ec:	9e08      	ldr	r6, [sp, #32]
 80014ee:	47b0      	blx	r6
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d1f0      	bne.n	80014d6 <_printf_common+0x86>
 80014f4:	2001      	movs	r0, #1
 80014f6:	4240      	negs	r0, r0
 80014f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80014fa:	2030      	movs	r0, #48	; 0x30
 80014fc:	18e1      	adds	r1, r4, r3
 80014fe:	3143      	adds	r1, #67	; 0x43
 8001500:	7008      	strb	r0, [r1, #0]
 8001502:	0021      	movs	r1, r4
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	3145      	adds	r1, #69	; 0x45
 8001508:	7809      	ldrb	r1, [r1, #0]
 800150a:	18a2      	adds	r2, r4, r2
 800150c:	3243      	adds	r2, #67	; 0x43
 800150e:	3302      	adds	r3, #2
 8001510:	7011      	strb	r1, [r2, #0]
 8001512:	e7c1      	b.n	8001498 <_printf_common+0x48>
 8001514:	0022      	movs	r2, r4
 8001516:	2301      	movs	r3, #1
 8001518:	321a      	adds	r2, #26
 800151a:	9901      	ldr	r1, [sp, #4]
 800151c:	9800      	ldr	r0, [sp, #0]
 800151e:	9e08      	ldr	r6, [sp, #32]
 8001520:	47b0      	blx	r6
 8001522:	1c43      	adds	r3, r0, #1
 8001524:	d0e6      	beq.n	80014f4 <_printf_common+0xa4>
 8001526:	3701      	adds	r7, #1
 8001528:	e7d1      	b.n	80014ce <_printf_common+0x7e>
	...

0800152c <_printf_i>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	9204      	str	r2, [sp, #16]
 8001532:	000a      	movs	r2, r1
 8001534:	3243      	adds	r2, #67	; 0x43
 8001536:	9305      	str	r3, [sp, #20]
 8001538:	9003      	str	r0, [sp, #12]
 800153a:	9202      	str	r2, [sp, #8]
 800153c:	7e0a      	ldrb	r2, [r1, #24]
 800153e:	000c      	movs	r4, r1
 8001540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001542:	2a6e      	cmp	r2, #110	; 0x6e
 8001544:	d100      	bne.n	8001548 <_printf_i+0x1c>
 8001546:	e086      	b.n	8001656 <_printf_i+0x12a>
 8001548:	d81f      	bhi.n	800158a <_printf_i+0x5e>
 800154a:	2a63      	cmp	r2, #99	; 0x63
 800154c:	d033      	beq.n	80015b6 <_printf_i+0x8a>
 800154e:	d808      	bhi.n	8001562 <_printf_i+0x36>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d100      	bne.n	8001556 <_printf_i+0x2a>
 8001554:	e08c      	b.n	8001670 <_printf_i+0x144>
 8001556:	2a58      	cmp	r2, #88	; 0x58
 8001558:	d04d      	beq.n	80015f6 <_printf_i+0xca>
 800155a:	0025      	movs	r5, r4
 800155c:	3542      	adds	r5, #66	; 0x42
 800155e:	702a      	strb	r2, [r5, #0]
 8001560:	e030      	b.n	80015c4 <_printf_i+0x98>
 8001562:	2a64      	cmp	r2, #100	; 0x64
 8001564:	d001      	beq.n	800156a <_printf_i+0x3e>
 8001566:	2a69      	cmp	r2, #105	; 0x69
 8001568:	d1f7      	bne.n	800155a <_printf_i+0x2e>
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	6825      	ldr	r5, [r4, #0]
 800156e:	1d0a      	adds	r2, r1, #4
 8001570:	0628      	lsls	r0, r5, #24
 8001572:	d529      	bpl.n	80015c8 <_printf_i+0x9c>
 8001574:	6808      	ldr	r0, [r1, #0]
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	2800      	cmp	r0, #0
 800157a:	da03      	bge.n	8001584 <_printf_i+0x58>
 800157c:	232d      	movs	r3, #45	; 0x2d
 800157e:	9a02      	ldr	r2, [sp, #8]
 8001580:	4240      	negs	r0, r0
 8001582:	7013      	strb	r3, [r2, #0]
 8001584:	4e6b      	ldr	r6, [pc, #428]	; (8001734 <_printf_i+0x208>)
 8001586:	270a      	movs	r7, #10
 8001588:	e04f      	b.n	800162a <_printf_i+0xfe>
 800158a:	2a73      	cmp	r2, #115	; 0x73
 800158c:	d074      	beq.n	8001678 <_printf_i+0x14c>
 800158e:	d808      	bhi.n	80015a2 <_printf_i+0x76>
 8001590:	2a6f      	cmp	r2, #111	; 0x6f
 8001592:	d01f      	beq.n	80015d4 <_printf_i+0xa8>
 8001594:	2a70      	cmp	r2, #112	; 0x70
 8001596:	d1e0      	bne.n	800155a <_printf_i+0x2e>
 8001598:	2220      	movs	r2, #32
 800159a:	6809      	ldr	r1, [r1, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	6022      	str	r2, [r4, #0]
 80015a0:	e003      	b.n	80015aa <_printf_i+0x7e>
 80015a2:	2a75      	cmp	r2, #117	; 0x75
 80015a4:	d016      	beq.n	80015d4 <_printf_i+0xa8>
 80015a6:	2a78      	cmp	r2, #120	; 0x78
 80015a8:	d1d7      	bne.n	800155a <_printf_i+0x2e>
 80015aa:	0022      	movs	r2, r4
 80015ac:	2178      	movs	r1, #120	; 0x78
 80015ae:	3245      	adds	r2, #69	; 0x45
 80015b0:	7011      	strb	r1, [r2, #0]
 80015b2:	4e61      	ldr	r6, [pc, #388]	; (8001738 <_printf_i+0x20c>)
 80015b4:	e022      	b.n	80015fc <_printf_i+0xd0>
 80015b6:	0025      	movs	r5, r4
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	3542      	adds	r5, #66	; 0x42
 80015bc:	1d11      	adds	r1, r2, #4
 80015be:	6019      	str	r1, [r3, #0]
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	702b      	strb	r3, [r5, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	e065      	b.n	8001694 <_printf_i+0x168>
 80015c8:	6808      	ldr	r0, [r1, #0]
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	0669      	lsls	r1, r5, #25
 80015ce:	d5d3      	bpl.n	8001578 <_printf_i+0x4c>
 80015d0:	b200      	sxth	r0, r0
 80015d2:	e7d1      	b.n	8001578 <_printf_i+0x4c>
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	6825      	ldr	r5, [r4, #0]
 80015d8:	1d08      	adds	r0, r1, #4
 80015da:	6018      	str	r0, [r3, #0]
 80015dc:	6808      	ldr	r0, [r1, #0]
 80015de:	062e      	lsls	r6, r5, #24
 80015e0:	d505      	bpl.n	80015ee <_printf_i+0xc2>
 80015e2:	4e54      	ldr	r6, [pc, #336]	; (8001734 <_printf_i+0x208>)
 80015e4:	2708      	movs	r7, #8
 80015e6:	2a6f      	cmp	r2, #111	; 0x6f
 80015e8:	d01b      	beq.n	8001622 <_printf_i+0xf6>
 80015ea:	270a      	movs	r7, #10
 80015ec:	e019      	b.n	8001622 <_printf_i+0xf6>
 80015ee:	066d      	lsls	r5, r5, #25
 80015f0:	d5f7      	bpl.n	80015e2 <_printf_i+0xb6>
 80015f2:	b280      	uxth	r0, r0
 80015f4:	e7f5      	b.n	80015e2 <_printf_i+0xb6>
 80015f6:	3145      	adds	r1, #69	; 0x45
 80015f8:	4e4e      	ldr	r6, [pc, #312]	; (8001734 <_printf_i+0x208>)
 80015fa:	700a      	strb	r2, [r1, #0]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	1d01      	adds	r1, r0, #4
 8001602:	6800      	ldr	r0, [r0, #0]
 8001604:	6019      	str	r1, [r3, #0]
 8001606:	0615      	lsls	r5, r2, #24
 8001608:	d521      	bpl.n	800164e <_printf_i+0x122>
 800160a:	07d3      	lsls	r3, r2, #31
 800160c:	d502      	bpl.n	8001614 <_printf_i+0xe8>
 800160e:	2320      	movs	r3, #32
 8001610:	431a      	orrs	r2, r3
 8001612:	6022      	str	r2, [r4, #0]
 8001614:	2710      	movs	r7, #16
 8001616:	2800      	cmp	r0, #0
 8001618:	d103      	bne.n	8001622 <_printf_i+0xf6>
 800161a:	2320      	movs	r3, #32
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	439a      	bics	r2, r3
 8001620:	6022      	str	r2, [r4, #0]
 8001622:	0023      	movs	r3, r4
 8001624:	2200      	movs	r2, #0
 8001626:	3343      	adds	r3, #67	; 0x43
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	6863      	ldr	r3, [r4, #4]
 800162c:	60a3      	str	r3, [r4, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db58      	blt.n	80016e4 <_printf_i+0x1b8>
 8001632:	2204      	movs	r2, #4
 8001634:	6821      	ldr	r1, [r4, #0]
 8001636:	4391      	bics	r1, r2
 8001638:	6021      	str	r1, [r4, #0]
 800163a:	2800      	cmp	r0, #0
 800163c:	d154      	bne.n	80016e8 <_printf_i+0x1bc>
 800163e:	9d02      	ldr	r5, [sp, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05a      	beq.n	80016fa <_printf_i+0x1ce>
 8001644:	0025      	movs	r5, r4
 8001646:	7833      	ldrb	r3, [r6, #0]
 8001648:	3542      	adds	r5, #66	; 0x42
 800164a:	702b      	strb	r3, [r5, #0]
 800164c:	e055      	b.n	80016fa <_printf_i+0x1ce>
 800164e:	0655      	lsls	r5, r2, #25
 8001650:	d5db      	bpl.n	800160a <_printf_i+0xde>
 8001652:	b280      	uxth	r0, r0
 8001654:	e7d9      	b.n	800160a <_printf_i+0xde>
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	680d      	ldr	r5, [r1, #0]
 800165a:	1d10      	adds	r0, r2, #4
 800165c:	6949      	ldr	r1, [r1, #20]
 800165e:	6018      	str	r0, [r3, #0]
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	062e      	lsls	r6, r5, #24
 8001664:	d501      	bpl.n	800166a <_printf_i+0x13e>
 8001666:	6019      	str	r1, [r3, #0]
 8001668:	e002      	b.n	8001670 <_printf_i+0x144>
 800166a:	066d      	lsls	r5, r5, #25
 800166c:	d5fb      	bpl.n	8001666 <_printf_i+0x13a>
 800166e:	8019      	strh	r1, [r3, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	9d02      	ldr	r5, [sp, #8]
 8001674:	6123      	str	r3, [r4, #16]
 8001676:	e04f      	b.n	8001718 <_printf_i+0x1ec>
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	1d11      	adds	r1, r2, #4
 800167c:	6019      	str	r1, [r3, #0]
 800167e:	6815      	ldr	r5, [r2, #0]
 8001680:	2100      	movs	r1, #0
 8001682:	6862      	ldr	r2, [r4, #4]
 8001684:	0028      	movs	r0, r5
 8001686:	f000 f859 	bl	800173c <memchr>
 800168a:	2800      	cmp	r0, #0
 800168c:	d001      	beq.n	8001692 <_printf_i+0x166>
 800168e:	1b40      	subs	r0, r0, r5
 8001690:	6060      	str	r0, [r4, #4]
 8001692:	6863      	ldr	r3, [r4, #4]
 8001694:	6123      	str	r3, [r4, #16]
 8001696:	2300      	movs	r3, #0
 8001698:	9a02      	ldr	r2, [sp, #8]
 800169a:	7013      	strb	r3, [r2, #0]
 800169c:	e03c      	b.n	8001718 <_printf_i+0x1ec>
 800169e:	6923      	ldr	r3, [r4, #16]
 80016a0:	002a      	movs	r2, r5
 80016a2:	9904      	ldr	r1, [sp, #16]
 80016a4:	9803      	ldr	r0, [sp, #12]
 80016a6:	9d05      	ldr	r5, [sp, #20]
 80016a8:	47a8      	blx	r5
 80016aa:	1c43      	adds	r3, r0, #1
 80016ac:	d03e      	beq.n	800172c <_printf_i+0x200>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	079b      	lsls	r3, r3, #30
 80016b2:	d415      	bmi.n	80016e0 <_printf_i+0x1b4>
 80016b4:	9b07      	ldr	r3, [sp, #28]
 80016b6:	68e0      	ldr	r0, [r4, #12]
 80016b8:	4298      	cmp	r0, r3
 80016ba:	da39      	bge.n	8001730 <_printf_i+0x204>
 80016bc:	0018      	movs	r0, r3
 80016be:	e037      	b.n	8001730 <_printf_i+0x204>
 80016c0:	0022      	movs	r2, r4
 80016c2:	2301      	movs	r3, #1
 80016c4:	3219      	adds	r2, #25
 80016c6:	9904      	ldr	r1, [sp, #16]
 80016c8:	9803      	ldr	r0, [sp, #12]
 80016ca:	9e05      	ldr	r6, [sp, #20]
 80016cc:	47b0      	blx	r6
 80016ce:	1c43      	adds	r3, r0, #1
 80016d0:	d02c      	beq.n	800172c <_printf_i+0x200>
 80016d2:	3501      	adds	r5, #1
 80016d4:	68e3      	ldr	r3, [r4, #12]
 80016d6:	9a07      	ldr	r2, [sp, #28]
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	42ab      	cmp	r3, r5
 80016dc:	dcf0      	bgt.n	80016c0 <_printf_i+0x194>
 80016de:	e7e9      	b.n	80016b4 <_printf_i+0x188>
 80016e0:	2500      	movs	r5, #0
 80016e2:	e7f7      	b.n	80016d4 <_printf_i+0x1a8>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d0ad      	beq.n	8001644 <_printf_i+0x118>
 80016e8:	9d02      	ldr	r5, [sp, #8]
 80016ea:	0039      	movs	r1, r7
 80016ec:	f7fe fd92 	bl	8000214 <__aeabi_uidivmod>
 80016f0:	5c73      	ldrb	r3, [r6, r1]
 80016f2:	3d01      	subs	r5, #1
 80016f4:	702b      	strb	r3, [r5, #0]
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d1f7      	bne.n	80016ea <_printf_i+0x1be>
 80016fa:	2f08      	cmp	r7, #8
 80016fc:	d109      	bne.n	8001712 <_printf_i+0x1e6>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	07db      	lsls	r3, r3, #31
 8001702:	d506      	bpl.n	8001712 <_printf_i+0x1e6>
 8001704:	6863      	ldr	r3, [r4, #4]
 8001706:	6922      	ldr	r2, [r4, #16]
 8001708:	4293      	cmp	r3, r2
 800170a:	dc02      	bgt.n	8001712 <_printf_i+0x1e6>
 800170c:	2330      	movs	r3, #48	; 0x30
 800170e:	3d01      	subs	r5, #1
 8001710:	702b      	strb	r3, [r5, #0]
 8001712:	9b02      	ldr	r3, [sp, #8]
 8001714:	1b5b      	subs	r3, r3, r5
 8001716:	6123      	str	r3, [r4, #16]
 8001718:	9b05      	ldr	r3, [sp, #20]
 800171a:	aa07      	add	r2, sp, #28
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	0021      	movs	r1, r4
 8001720:	9b04      	ldr	r3, [sp, #16]
 8001722:	9803      	ldr	r0, [sp, #12]
 8001724:	f7ff fe94 	bl	8001450 <_printf_common>
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	d1b8      	bne.n	800169e <_printf_i+0x172>
 800172c:	2001      	movs	r0, #1
 800172e:	4240      	negs	r0, r0
 8001730:	b009      	add	sp, #36	; 0x24
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	08001ab5 	.word	0x08001ab5
 8001738:	08001ac6 	.word	0x08001ac6

0800173c <memchr>:
 800173c:	b2c9      	uxtb	r1, r1
 800173e:	1882      	adds	r2, r0, r2
 8001740:	4290      	cmp	r0, r2
 8001742:	d101      	bne.n	8001748 <memchr+0xc>
 8001744:	2000      	movs	r0, #0
 8001746:	4770      	bx	lr
 8001748:	7803      	ldrb	r3, [r0, #0]
 800174a:	428b      	cmp	r3, r1
 800174c:	d0fb      	beq.n	8001746 <memchr+0xa>
 800174e:	3001      	adds	r0, #1
 8001750:	e7f6      	b.n	8001740 <memchr+0x4>

08001752 <memcpy>:
 8001752:	2300      	movs	r3, #0
 8001754:	b510      	push	{r4, lr}
 8001756:	429a      	cmp	r2, r3
 8001758:	d100      	bne.n	800175c <memcpy+0xa>
 800175a:	bd10      	pop	{r4, pc}
 800175c:	5ccc      	ldrb	r4, [r1, r3]
 800175e:	54c4      	strb	r4, [r0, r3]
 8001760:	3301      	adds	r3, #1
 8001762:	e7f8      	b.n	8001756 <memcpy+0x4>

08001764 <memmove>:
 8001764:	b510      	push	{r4, lr}
 8001766:	4288      	cmp	r0, r1
 8001768:	d902      	bls.n	8001770 <memmove+0xc>
 800176a:	188b      	adds	r3, r1, r2
 800176c:	4298      	cmp	r0, r3
 800176e:	d303      	bcc.n	8001778 <memmove+0x14>
 8001770:	2300      	movs	r3, #0
 8001772:	e007      	b.n	8001784 <memmove+0x20>
 8001774:	5c8b      	ldrb	r3, [r1, r2]
 8001776:	5483      	strb	r3, [r0, r2]
 8001778:	3a01      	subs	r2, #1
 800177a:	d2fb      	bcs.n	8001774 <memmove+0x10>
 800177c:	bd10      	pop	{r4, pc}
 800177e:	5ccc      	ldrb	r4, [r1, r3]
 8001780:	54c4      	strb	r4, [r0, r3]
 8001782:	3301      	adds	r3, #1
 8001784:	429a      	cmp	r2, r3
 8001786:	d1fa      	bne.n	800177e <memmove+0x1a>
 8001788:	e7f8      	b.n	800177c <memmove+0x18>
	...

0800178c <_free_r>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	0005      	movs	r5, r0
 8001790:	2900      	cmp	r1, #0
 8001792:	d010      	beq.n	80017b6 <_free_r+0x2a>
 8001794:	1f0c      	subs	r4, r1, #4
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	da00      	bge.n	800179e <_free_r+0x12>
 800179c:	18e4      	adds	r4, r4, r3
 800179e:	0028      	movs	r0, r5
 80017a0:	f000 f8d4 	bl	800194c <__malloc_lock>
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <_free_r+0x90>)
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <_free_r+0x2c>
 80017ac:	6063      	str	r3, [r4, #4]
 80017ae:	6014      	str	r4, [r2, #0]
 80017b0:	0028      	movs	r0, r5
 80017b2:	f000 f8cc 	bl	800194e <__malloc_unlock>
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	42a3      	cmp	r3, r4
 80017ba:	d909      	bls.n	80017d0 <_free_r+0x44>
 80017bc:	6821      	ldr	r1, [r4, #0]
 80017be:	1860      	adds	r0, r4, r1
 80017c0:	4283      	cmp	r3, r0
 80017c2:	d1f3      	bne.n	80017ac <_free_r+0x20>
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	1841      	adds	r1, r0, r1
 80017ca:	6021      	str	r1, [r4, #0]
 80017cc:	e7ee      	b.n	80017ac <_free_r+0x20>
 80017ce:	0013      	movs	r3, r2
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d001      	beq.n	80017da <_free_r+0x4e>
 80017d6:	42a2      	cmp	r2, r4
 80017d8:	d9f9      	bls.n	80017ce <_free_r+0x42>
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	1858      	adds	r0, r3, r1
 80017de:	42a0      	cmp	r0, r4
 80017e0:	d10b      	bne.n	80017fa <_free_r+0x6e>
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	1809      	adds	r1, r1, r0
 80017e6:	1858      	adds	r0, r3, r1
 80017e8:	6019      	str	r1, [r3, #0]
 80017ea:	4282      	cmp	r2, r0
 80017ec:	d1e0      	bne.n	80017b0 <_free_r+0x24>
 80017ee:	6810      	ldr	r0, [r2, #0]
 80017f0:	6852      	ldr	r2, [r2, #4]
 80017f2:	1841      	adds	r1, r0, r1
 80017f4:	6019      	str	r1, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	e7da      	b.n	80017b0 <_free_r+0x24>
 80017fa:	42a0      	cmp	r0, r4
 80017fc:	d902      	bls.n	8001804 <_free_r+0x78>
 80017fe:	230c      	movs	r3, #12
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	e7d5      	b.n	80017b0 <_free_r+0x24>
 8001804:	6821      	ldr	r1, [r4, #0]
 8001806:	1860      	adds	r0, r4, r1
 8001808:	4282      	cmp	r2, r0
 800180a:	d103      	bne.n	8001814 <_free_r+0x88>
 800180c:	6810      	ldr	r0, [r2, #0]
 800180e:	6852      	ldr	r2, [r2, #4]
 8001810:	1841      	adds	r1, r0, r1
 8001812:	6021      	str	r1, [r4, #0]
 8001814:	6062      	str	r2, [r4, #4]
 8001816:	605c      	str	r4, [r3, #4]
 8001818:	e7ca      	b.n	80017b0 <_free_r+0x24>
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000088 	.word	0x20000088

08001820 <_malloc_r>:
 8001820:	2303      	movs	r3, #3
 8001822:	b570      	push	{r4, r5, r6, lr}
 8001824:	1ccd      	adds	r5, r1, #3
 8001826:	439d      	bics	r5, r3
 8001828:	3508      	adds	r5, #8
 800182a:	0006      	movs	r6, r0
 800182c:	2d0c      	cmp	r5, #12
 800182e:	d21e      	bcs.n	800186e <_malloc_r+0x4e>
 8001830:	250c      	movs	r5, #12
 8001832:	42a9      	cmp	r1, r5
 8001834:	d81d      	bhi.n	8001872 <_malloc_r+0x52>
 8001836:	0030      	movs	r0, r6
 8001838:	f000 f888 	bl	800194c <__malloc_lock>
 800183c:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <_malloc_r+0xb4>)
 800183e:	6814      	ldr	r4, [r2, #0]
 8001840:	0021      	movs	r1, r4
 8001842:	2900      	cmp	r1, #0
 8001844:	d119      	bne.n	800187a <_malloc_r+0x5a>
 8001846:	4c24      	ldr	r4, [pc, #144]	; (80018d8 <_malloc_r+0xb8>)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <_malloc_r+0x36>
 800184e:	0030      	movs	r0, r6
 8001850:	f000 f86a 	bl	8001928 <_sbrk_r>
 8001854:	6020      	str	r0, [r4, #0]
 8001856:	0029      	movs	r1, r5
 8001858:	0030      	movs	r0, r6
 800185a:	f000 f865 	bl	8001928 <_sbrk_r>
 800185e:	1c43      	adds	r3, r0, #1
 8001860:	d12b      	bne.n	80018ba <_malloc_r+0x9a>
 8001862:	230c      	movs	r3, #12
 8001864:	0030      	movs	r0, r6
 8001866:	6033      	str	r3, [r6, #0]
 8001868:	f000 f871 	bl	800194e <__malloc_unlock>
 800186c:	e003      	b.n	8001876 <_malloc_r+0x56>
 800186e:	2d00      	cmp	r5, #0
 8001870:	dadf      	bge.n	8001832 <_malloc_r+0x12>
 8001872:	230c      	movs	r3, #12
 8001874:	6033      	str	r3, [r6, #0]
 8001876:	2000      	movs	r0, #0
 8001878:	bd70      	pop	{r4, r5, r6, pc}
 800187a:	680b      	ldr	r3, [r1, #0]
 800187c:	1b5b      	subs	r3, r3, r5
 800187e:	d419      	bmi.n	80018b4 <_malloc_r+0x94>
 8001880:	2b0b      	cmp	r3, #11
 8001882:	d903      	bls.n	800188c <_malloc_r+0x6c>
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	18cc      	adds	r4, r1, r3
 8001888:	6025      	str	r5, [r4, #0]
 800188a:	e003      	b.n	8001894 <_malloc_r+0x74>
 800188c:	684b      	ldr	r3, [r1, #4]
 800188e:	428c      	cmp	r4, r1
 8001890:	d10d      	bne.n	80018ae <_malloc_r+0x8e>
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	0030      	movs	r0, r6
 8001896:	f000 f85a 	bl	800194e <__malloc_unlock>
 800189a:	0020      	movs	r0, r4
 800189c:	2207      	movs	r2, #7
 800189e:	300b      	adds	r0, #11
 80018a0:	1d23      	adds	r3, r4, #4
 80018a2:	4390      	bics	r0, r2
 80018a4:	1ac3      	subs	r3, r0, r3
 80018a6:	d0e7      	beq.n	8001878 <_malloc_r+0x58>
 80018a8:	425a      	negs	r2, r3
 80018aa:	50e2      	str	r2, [r4, r3]
 80018ac:	e7e4      	b.n	8001878 <_malloc_r+0x58>
 80018ae:	6063      	str	r3, [r4, #4]
 80018b0:	000c      	movs	r4, r1
 80018b2:	e7ef      	b.n	8001894 <_malloc_r+0x74>
 80018b4:	000c      	movs	r4, r1
 80018b6:	6849      	ldr	r1, [r1, #4]
 80018b8:	e7c3      	b.n	8001842 <_malloc_r+0x22>
 80018ba:	2303      	movs	r3, #3
 80018bc:	1cc4      	adds	r4, r0, #3
 80018be:	439c      	bics	r4, r3
 80018c0:	42a0      	cmp	r0, r4
 80018c2:	d0e1      	beq.n	8001888 <_malloc_r+0x68>
 80018c4:	1a21      	subs	r1, r4, r0
 80018c6:	0030      	movs	r0, r6
 80018c8:	f000 f82e 	bl	8001928 <_sbrk_r>
 80018cc:	1c43      	adds	r3, r0, #1
 80018ce:	d1db      	bne.n	8001888 <_malloc_r+0x68>
 80018d0:	e7c7      	b.n	8001862 <_malloc_r+0x42>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	20000088 	.word	0x20000088
 80018d8:	2000008c 	.word	0x2000008c

080018dc <_realloc_r>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	0007      	movs	r7, r0
 80018e0:	000d      	movs	r5, r1
 80018e2:	0016      	movs	r6, r2
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d105      	bne.n	80018f4 <_realloc_r+0x18>
 80018e8:	0011      	movs	r1, r2
 80018ea:	f7ff ff99 	bl	8001820 <_malloc_r>
 80018ee:	0004      	movs	r4, r0
 80018f0:	0020      	movs	r0, r4
 80018f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d103      	bne.n	8001900 <_realloc_r+0x24>
 80018f8:	f7ff ff48 	bl	800178c <_free_r>
 80018fc:	0034      	movs	r4, r6
 80018fe:	e7f7      	b.n	80018f0 <_realloc_r+0x14>
 8001900:	f000 f826 	bl	8001950 <_malloc_usable_size_r>
 8001904:	002c      	movs	r4, r5
 8001906:	42b0      	cmp	r0, r6
 8001908:	d2f2      	bcs.n	80018f0 <_realloc_r+0x14>
 800190a:	0031      	movs	r1, r6
 800190c:	0038      	movs	r0, r7
 800190e:	f7ff ff87 	bl	8001820 <_malloc_r>
 8001912:	1e04      	subs	r4, r0, #0
 8001914:	d0ec      	beq.n	80018f0 <_realloc_r+0x14>
 8001916:	0029      	movs	r1, r5
 8001918:	0032      	movs	r2, r6
 800191a:	f7ff ff1a 	bl	8001752 <memcpy>
 800191e:	0029      	movs	r1, r5
 8001920:	0038      	movs	r0, r7
 8001922:	f7ff ff33 	bl	800178c <_free_r>
 8001926:	e7e3      	b.n	80018f0 <_realloc_r+0x14>

08001928 <_sbrk_r>:
 8001928:	2300      	movs	r3, #0
 800192a:	b570      	push	{r4, r5, r6, lr}
 800192c:	4c06      	ldr	r4, [pc, #24]	; (8001948 <_sbrk_r+0x20>)
 800192e:	0005      	movs	r5, r0
 8001930:	0008      	movs	r0, r1
 8001932:	6023      	str	r3, [r4, #0]
 8001934:	f7ff fb46 	bl	8000fc4 <_sbrk>
 8001938:	1c43      	adds	r3, r0, #1
 800193a:	d103      	bne.n	8001944 <_sbrk_r+0x1c>
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d000      	beq.n	8001944 <_sbrk_r+0x1c>
 8001942:	602b      	str	r3, [r5, #0]
 8001944:	bd70      	pop	{r4, r5, r6, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	200000ac 	.word	0x200000ac

0800194c <__malloc_lock>:
 800194c:	4770      	bx	lr

0800194e <__malloc_unlock>:
 800194e:	4770      	bx	lr

08001950 <_malloc_usable_size_r>:
 8001950:	1f0b      	subs	r3, r1, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1f18      	subs	r0, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	da01      	bge.n	800195e <_malloc_usable_size_r+0xe>
 800195a:	580b      	ldr	r3, [r1, r0]
 800195c:	18c0      	adds	r0, r0, r3
 800195e:	4770      	bx	lr

08001960 <_init>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr

0800196c <_fini>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001972:	bc08      	pop	{r3}
 8001974:	469e      	mov	lr, r3
 8001976:	4770      	bx	lr
